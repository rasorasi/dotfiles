;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

export PATH="/home/raso/.cask/bin:$PATH"


state
study
apply
calculate
state





このたびは私どものために貴重な時間を割いて、技術交流をさせていただきありがとうございました。

様のお話を参考にさせてもらうことで、今後の我々の活動に大変有意に役立つことになることと思います。

本当にありがとうございました。
来年度の本大会でお会いできるよう、お互いにがんばりましょう。
今後ともよろしくお願いします。







-- 
/********************************************************************************************
新潟大学工学部　科学技術研究部
kagiken21@gmail.com
********************************************************************************************/































最終課題について、かなり普通のアイディアですが、思いついた案を書きます。

アーティスト名や曲名などを羅列し、合わせて説明文も書いておく。ただし、その説明文はどれがどのアーティスト名や曲名の説明をしているのかをわからなくしておく。解答者は正しい組み合わせを解答する、というものです。
レポート課題だと、友達と解答を見せ合えばかなり簡単になってしまうので、曲を流すリスニング形式でもありかなと考えました。


ロックミュージックにおいて典型的なキャラクター性を持ったアーティストについてですが、特定のロックミュージシャンのキャラクターを語れるほど詳しく知っているアーティストがいないので、少々昔のことなのですが、近況報告させていただきます。

午前８時ごろの登校中の電車内の話です。いつもその時間は電車が満員なので、自分は入口付近のつり革に手をかけて乗っていました。新潟から白山に到着した時、かなりの人がドアから出ていきましたが、自分はドアの近くにいたせいで邪魔になっていました。
そのとき、人がほとんど降り終わったあたりで突然、「どけよ邪魔なんだよ」と自分は横に突き飛ばれました。ギリギリで転ぶことはありませんでしたが、振り返った時には誰が突き飛ばしたがわからなくなりました。怒りがわいたというよりも、単純なショックが大きくて、大学前駅につくまでしばらく茫然としていました。

このあとから若干トラウマになっていて、電車乗るときは頑張って端っこに行くことにしています。





(/ 152 23)
6


(defun op (exp) (car (cdr exp)))
op
(defun arg1 (exp) (car exp))
arg1
(defun arg2 (exp) (car (cdr (cdr exp))))
arg2

(setq op-func '((+ . +) (- . -) (* . *)))
((+ . +) (- . -) (* . *))

((+ quote +) (- quote -) (* quote *))

((+ . +) (- . -) (* . *))

(defun op-up (op) (cdr (assq op op-func)))

(op-up '+)
+


op-up
(op-up (op '(1 - 2)))
(quote -)

(quote +)

(quote +)


(defun calc (exp)
  (cond
   ((atom exp) exp)
   (t (funcall (op-up (op exp)) (calc (arg1 exp)) (calc (arg2 exp))))))
calc

calc

calc

calc

(calc '(1 + 2))
3

(defun test ()
  (let (ril)
    (ril)))
test

(test)

(let (ril) ril)
nil

(setq nil (cons 1 nil))

(let ((n 3))
  (setq n (cons 1 n))
  (setq n (cons 2 n)))
(2 1 . 3)

(2 1)

(defun repl (lst old new)
  (let (alst arst)
    (while lst
      (cond
       ((eq (car lst) old)
	(setq alst (cons new alst)))
       (t
	(setq alst (cons (car lst) alst))))
      (setq lst (cdr lst)))
    (while alst
      (setq arst (cons (car alst) arst))
      (setq alst (cdr alst)))
    arst))
repl



    alst))
repl

(repl '(1 2 3) 1 5)
(5 2 3)

(3 2 5)

(make-list 3 'dog)
(dog dog dog)

(defun make-lst (n x)
  (let (alst)
    (while (> n 0)
      (setq alst (cons x alst))
      (setq n (1- n)))
    alst))
make-lst

make-lst

make-lst

make-lst

make-lst

(make-lst 3 'dog)
(dog dog dog)

(x alst)



(zerop 0)
t
(atom 0)
t
(> 0 0)
nil

t

t

t
(< 1 0)
nil


(defun make-lst (n x)
  (cond
   ((zerop n) nil)
   (t (cons x (make-lst (1- n) x)))))
make-lst

make-lst

(make-lst 4 'cat)
(cat cat cat cat)

(setq a '(1 2))
(1 2)
(setq b (cons 'x a))
(x 1 2)
b
(x 1 2)

(x 1 2)

(setcar a 'z)
z
a
(z 2)
b
(x z 2)

a
(1 2)
(setcdr b 'r)
r
b
(x . r)
a
(z 2)

(defun Nreverse (lst)
  (let (prev next)
    (while lst
      (setq next (cdr lst))
      (setcdr lst prev)
      (setq prev lst)
      (setq lst next))
    prev))
Nreverse
Nreverse

Nreverse

Nreverse
(setq a '(1 2 3))
(1 2 3)

(Nreverse a)
(3 2 1)
a
(1)

(3 2 1)

nil
a
(1 2 3)

nil

(3 2 1)






(setq a (cons 1 nil))
(1)

(setq a (cons 2 nil))
(2)
a
(2)

(setq a (cons 3 a))
(3 2)

(defun Delq (lst x)
  (let ((this lst) prev)
    (while this
      (cond
       ((eq (car this) x)
	(cond
	 ((null prev) (setq lst (cdr lst)))
	 (t (setcdr prev (cdr this)))))
	(t (setq prev this)))
      (setq this (cdr this)))
    lst))
Delq
n
Delq

Delq

(Delq '(1 2 3) 1)

(2 3)

(/ 16000000 256)
(/ 62500 12500)
5

	
(progn (print "The first form")
       (print "The second form")
       (print "The third form"))

"The first form"

"The second form"

"The third form"
"The third form"
