#include"p24FJ64GA002.h"
#include"CAN.h"

#define	SS		LATBbits.LATB15

BYTE MsgBuf[14] = {0};

union {
	BYTE byte;
	struct {
		unsigned char TXP :2;	//優先順位 0(低)~3(高)
		unsigned char  :1;
		unsigned char  TXREQ :1; 
		unsigned char  :4; 		//Read only
		
	}bits;

}TXB0CTRL; 


union {
	BYTE byte;
	struct {
		unsigned char TXP :2;	
		unsigned char  :1;
		unsigned char  TXREQ :1; 
		unsigned char  :4; 		
		
	}bits;

}TXB1CTRL; 


union {
	BYTE byte;
	struct {
		unsigned char TXP :2;
		unsigned char  :1;
		unsigned char  TXREQ :1; 
		unsigned char  :4; 	
		
	}bits;

}TXB2CTRL; 


////TXBnDLC
union{
	BYTE byte;
	struct {
		unsigned char DLC :4;	//DLC(0~8)
		unsigned char  :2;
		unsigned char RTR :1;
		unsigned char  :1;
		
	}bits;

}TXB0DLC; 


union{
	BYTE byte;
	struct {
		unsigned char DLC :4;
		unsigned char  :2;
		unsigned char RTR :1;
		unsigned char  :1;
		
	}bits;

}TXB1DLC; 


union{
	BYTE byte;
	struct {
		unsigned char DLC :4;
		unsigned char  :2;
		unsigned char RTR :1;
		unsigned char  :1;
		
	}bits;

}TXB2DLC; 


union{
	BYTE byte;
	struct {
		unsigned char BRP :5;	
		unsigned char  SJW:4; 	
	}bits;

}CNF1; 



union {
	BYTE byte;
	struct {
		unsigned char PRSEG :3;	
		unsigned char  PHSEG1 :3;
		unsigned char  SAM :1;
		unsigned char  BTLMODE :1;
		
		 	
	}bits;

}CNF2; 


union {
	BYTE byte;
	struct {
		unsigned char PHSEG2 :3;	
		unsigned char   :3;
		unsigned char  WAKFIL :1;
		unsigned char  SOF :1; 
		
		 	
	}bits;

}CNF3; 


union{
	BYTE byte;
	struct {
		unsigned char CLKPRE :2;	
		unsigned char  CLKEN :1;
		unsigned char  OSM :1;
		unsigned char  ABAT :1;
		unsigned char REQOP :3;
		// 000 =  ノーマル・オペレーション・モード
		// 001 = スリープ・モード
		// 010 = ループバック・モード
		// 011 = リスン・オンリ・モード
		// 100 = コンフィギュレーション・モード　(デフォルト)
	}bits;

}CANCTRL; 


union{
	BYTE byte;
	struct{
		unsigned char FILHIT0 :1; //RO
		unsigned char :1;
		unsigned char BUKT :1; //ロールオーバー
		unsigned char RXRTR :1; //RO
		unsigned char :1; 
		unsigned char RXM :2; // 11 = マスク、フィルタを使用しない
		unsigned char :1; 
	}bits;
}RXB0CTRL; 


union{
	BYTE byte;
	struct{
		unsigned char FILHIT :3; //RO
		unsigned char RXRTR:1; //RO
		unsigned char :1; 
		unsigned char RXM :2; // 11 = マスク、フィルタを使用しない
		unsigned char :1; 
	}bits;
}RXB1CTRL;

void SPI1Init(void)
{
	//SPIポート設定
	//TRISBbits.TRISB0 = 0; //SS_out	
	//RPOR1bits.RP2R = 7; // SDO
	//RPINR20bits.SDI1R = 1; //SDI 
	//RPOR1bits.RP3R = 8; // SCK
	
    //config SPI1
    
	SPI1STATbits.SPIEN 		= 0;	// disable SPI port
	SPI1STATbits.SPISIDL 	= 0; 	// Continue module operation in Idle mode
    
	SPI1BUF 				= 0;   	// clear SPI buffer
    
	IFS0bits.SPI1IF 		= 0;	// clear interrupt flag
	IEC0bits.SPI1IE 		= 0;	// disable interrupt
    
	SPI1CON1bits.DISSCK		= 0;	// Internal SPIx clock is enabled
	SPI1CON1bits.DISSDO		= 0;	// SDOx pin is controlled by the module
	SPI1CON1bits.MODE16 	= 0;	// set in 16-bit mode, clear in 8-bit mode
	SPI1CON1bits.SMP		= 1;	// Input data sampled at middle of data output time
	SPI1CON1bits.CKP 		= 0;	// CKP and CKE is subject to change ...
	SPI1CON1bits.CKE 		= 1;	// ... based on your communication mode.
	SPI1CON1bits.MSTEN 		= 1; 	// 1 =  Master mode; 0 =  Slave mode
	SPI1CON1bits.SPRE 		= 4; 	// Secondary Prescaler = 4:1
	SPI1CON1bits.PPRE 		= 2; 	// Primary Prescaler = 4:1
	
	SPI1CON2 				= 0;	// non-framed mode

	
	SPI1STATbits.SPIEN 		= 1; 	// enable SPI port, clear status


}

BYTE writeSPI1( BYTE data )
{
	SPI1BUF = data;			// write to buffer for TX
	while(!SPI1STATbits.SPIRBF);	// wait for transfer to complete
	return SPI1BUF;    			// read the received value
}//writeSPI1

BYTE change(BYTE inst, BYTE adrs, BYTE arg1, BYTE arg2)
{
	SS = 0;
	BYTE read_data;
	writeSPI1(inst);
	writeSPI1(adrs);
	read_data = writeSPI1(arg1);
	if(arg2 != 0)
		writeSPI1(arg2);
	SS = 1;
	
	return read_data;
}

void C_Write(BYTE *data)
{	
	int i;
	SS = 0;
	writeSPI1(0x40);
	for(i = 0; i < 13; i++){
		writeSPI1(*(data + i));
		
	}	 
	SS = 1;
		
}	

void C_Read(BYTE *data)
{	
	int i;
	SS = 0;
	writeSPI1(0x90);
	for(i = 0; i < 13; i++){
		*(data + i) = writeSPI1(0);	
	}	 
	SS = 1;
		
}	

//受信バッファ（0, 1）を確認して、フルだったら1を返す（受信したら1を返す)
BYTE RxCheck(BYTE num)
{
	if(StRead() & (0x01 + num) return 1;
	else return 0;
}	 

void IDSet(BYTE *id, BYTE msg){
	id[0] = (msg >> 3);
	id[1] = (msg << 5);
}

void ErrorCheck(){
	if((Read(0x2d)&0x3f)>0)
		BitMod(0x0c, 0x28,0x28);
}

//使えません
void SetFilter(BYTE flt){
	
	RXB0CTRL.bits.RXM = 1;
	Write(A_RXB0CTRL, RXB0CTRL.byte);
	
	Write(0x00, (flt >> 3));
	Write(0x01, (flt << 5));

}

void CANInit()
{
	
	CNF1.bits.BRP = 4;		//ボーレートプリスケーラ
	CNF2.bits.PRSEG = 1;		//PropSegビット長
	CNF2.bits.PHSEG1 = 6;	//PH1ビット長
	RXB0CTRL.bits.RXM = 3;	//マスク、フィルタ
	RXB1CTRL.bits.RXM = 3;	//・・・を使用しない
	CANCTRL.byte = 0x07;			 //ノーマルモードに設定
	
	Reset();
	
	BitMod(0x0c, 0x14, 0x14);	//RX0BFに接続したLEDを点灯
	Write(A_CNF1, CNF1.byte);
	Write(A_CNF2, CNF2.byte);
	BitMod(A_RXB0CTRL, RXB0CTRL.byte, RXB0CTRL.byte);
	BitMod(A_RXB1CTRL, RXB1CTRL.byte, RXB1CTRL.byte);
	
	
	Write(A_CANCTRL, CANCTRL.byte);
	
	
}

