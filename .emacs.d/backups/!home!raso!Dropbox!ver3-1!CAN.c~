#include"p24FJ64GA002.h"
#include"CAN.h"

//Define main file
#define	SS		LATBbits.LATB15

/********************************************************/
//	This is list of TXBuffer and RXBuffer.
//	TXBuffer are substituted ID , datalong and data by user.
//  RXBuffer are substituted by Msg_c_read().
//	
/********************************************************/

BYTE TXMsgID[2] = {0};		// ID is 11bits 
BYTE TXMsgDataLong = 0;		// This is number seting to Data (0~8)
BYTE TXMsgData[8] = {0};	// Data is usable by 8byte

BYTE RXMsgID[2] = {0};     
BYTE RXMsgData[8] = {0};

/*** Copy to main file ***

extern BYTE TXMsgID[2];
extern BYTE TXMsgDataLong;
extern BYTE TXMsgData[8];

extern BYTE RXMsgID[2];
extern BYTE RXMsgData[8];

***/

union txb0ctrl TXB0CTRL; 
union txb1ctrl TXB1CTRL;
union txb2ctrl TXB2CTRL; 
union txb0dlc TXB0DLC;
union txb1dlc TXB1DLC; 
union txb2dlc TXB2DLC;
union cnf1 CNF1; 
union cnf2 CNF2; 
union canctrl CANCTRL; 
union rxb0ctrl RXB0CTRL; 
union rxb1ctrl RXB1CTRL;

void SPI1Init(void)
{
	/*** Example for SPI's port config ***
	
	TRISBbits.TRISB0 = 0; //SS_out (RP0)
	RPOR1bits.RP2R = 7; // SDO     (RP2)
	RPINR20bits.SDI1R = 1; //SDI   (RP1)
	RPOR1bits.RP3R = 8; // SCK	 (RP3)
	
	***/
    
	//config SPI1
    
	SPI1STATbits.SPIEN 		= 0;	// disable SPI port
	SPI1STATbits.SPISIDL 	= 0; 	// Continue module operation in Idle mode
    
	SPI1BUF 				= 0;   	// clear SPI buffer
    
	IFS0bits.SPI1IF 		= 0;	// clear interrupt flag
	IEC0bits.SPI1IE 		= 0;	// disable interrupt
    
	SPI1CON1bits.DISSCK		= 0;	// Internal SPIx clock is enabled
	SPI1CON1bits.DISSDO		= 0;	// SDOx pin is controlled by the module
	SPI1CON1bits.MODE16 	= 0;	// set in 16-bit mode, clear in 8-bit mode
	SPI1CON1bits.SMP		= 1;	// Input data sampled at middle of data output time
	SPI1CON1bits.CKP 		= 0;	// CKP and CKE is subject to change ...
	SPI1CON1bits.CKE 		= 1;	// ... based on your communication mode.
	SPI1CON1bits.MSTEN 		= 1; 	// 1 =  Master mode; 0 =  Slave mode
	SPI1CON1bits.SPRE 		= 4; 	// Secondary Prescaler = 4:1
	SPI1CON1bits.PPRE 		= 2; 	// Primary Prescaler = 4:1
	
	SPI1CON2 				= 0;	// non-framed mode

	
	SPI1STATbits.SPIEN 		= 1; 	// enable SPI port, clear status


}

BYTE writeSPI1( BYTE data )
{
	SPI1BUF = data;			// write to buffer for TX of pic24f
	while(!SPI1STATbits.SPIRBF);	// wait for transfer to complete
	return SPI1BUF;    			// read the received value
}//writeSPI1



/******************************************************/
//		change is MCP2515 Data Trans
//		adrs	CAN_Adrres
//		arg1	Data
//		inst	MCP2515Command
//		arg2	Mask for Data
/******************************************************/
BYTE change(BYTE inst, BYTE adrs, BYTE arg1, BYTE arg2)
{
	SS = 0;
	BYTE read_data;
	writeSPI1(inst);nn
	writeSPI1(adrs);
	read_data = writeSPI1(arg1);
	if(arg2 != 0)
		writeSPI1(arg2);
	SS = 1;
	
	return read_data;
}

/*****************************************************/
//		Data_c_set is continuity Data Trans
//		data		Data
/*****************************************************/
void Data_c_set(BYTE *data)
{	
	int i;
	SS = 0;
	writeSPI1(0x40);
	for(i = 0; i < 13; i++){
		writeSPI1(*(data + i));
		
	}	 
	SS = 1;
		
}	

/*****************************************************/
//		Data_c_read is continuity Data Trans
//		data		Data
/*****************************************************/
void Data_c_read(BYTE *data)
{	
	int i;
	SS = 0;
	writeSPI1(0x90);
	for(i = 0; i < 13; i++){
		*(data + i) = writeSPI1(0);	
	}	 
	SS = 1;
		
}	
/***************************************************/
//	  Rx_check() check that mcp2515 receive a masage
//	  num		check buffer number
/***************************************************/

int RX_check(BYTE num)
{
	if(StRead() & (0x01 + num)) return 1;
	else return 0;
}	 

void ID_set(BYTE *id, BYTE msg){
	id[0] = (msg >> 3);
	id[1] = (msg << 5);
}

void Error_check(){
	if((Read(0x2d)&0x3f)>0)
		BitMod(0x0c, 0x28,0x28);
}

//Žg‚¦‚Ü‚¹‚ñ
void SetFilter(BYTE flt){
	
	RXB0CTRL.bits.RXM = 1;
	Write(A_RXB0CTRL, RXB0CTRL.byte);
	
	Write(0x00, (flt >> 3));
	Write(0x01, (flt << 5));

}

void CAN_init()
{
	
	CNF1.bits.BRP = 4;		//baud rate prescaler
	CNF2.bits.PRSEG = 1;	//PropSeg bit long
	CNF2.bits.PHSEG1 = 6;	//PH1 bit long
	RXB0CTRL.bits.RXM = 3;	// Mask and Filter ...
	RXB1CTRL.bits.RXM = 3;	//... don't use
	CANCTRL.byte = 0x07;			 //set up normal mode
	
	Reset();
	
	BitMod(0x0c, 0x14, 0x14);	//LED set a port RX0BF brigten


	Write(A_CNF1, CNF1.byte);
	Write(A_CNF2, CNF2.byte);
	BitMod(A_RXB0CTRL, RXB0CTRL.byte, RXB0CTRL.byte);
	BitMod(A_RXB1CTRL, RXB1CTRL.byte, RXB1CTRL.byte);
	
	
	Write(A_CANCTRL, CANCTRL.byte);
	
	
}
/********************************************************/
//	Msg_send() send a TXBuffer of TXMsg lists to other node 
//  *id		TXMsgID 
//	lng		TXMsgDataLong
//	*data 	TXMsgData
/********************************************************/

void Msg_send(BYTE *id, BYTE lng, BYTE *data)
{
	int i;
	SS = 0;
	writeSPI1(0x40);
	for(i = 0; i < 2; i++)
		writeSPI1(*(id + i));
	
	writeSPI1(0);	writeSPI1(0);
	writeSPI1(lng);

	for(i = 0; i < 8; i++)
		writeSPI1(*(data + i));

	SS = 1;
	
	Send0();
}

/********************************************************/
// Msg_read() read RXBuffer which  CAN controller receive from other node
// 	*id		RXMsgID
// 	*data	RXMsgData
/********************************************************/


void Msg_read(BYTE *id, BYTE *data)
{	
	int i;
	SS = 0;
	writeSPI1(0x90);
	for(i = 0; i < 2; i++)
		*(id + i) = writeSPI1(0);	
	
	writeSPI1(0);writeSPI1(0);writeSPI1(0);

	for(i = 0; i < 8; i++)
		*(data + i) = writeSPI1(0);

	SS = 1;
		
}	
