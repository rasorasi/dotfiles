typedef unsigned char BYTE;
int nodefine;
#define	SS		nodefine


union{
  BYTE byte;
  struct {
    unsigned char DLC :4;	//DLC(0~8)
    unsigned char  :2;
    unsigned char RTR :1;
    unsigned char  :1;
		
  }bits;

}DLC; 

union {
  BYTE byte;
  struct {
	unsigned char TXP :2;	//優先順位 0(低)~3(高)
	unsigned char  :1;
	unsigned char  TXREQ :1; 
	unsigned char  :4; 		//Read only
		
  }bits;

}TXCTRL; 
BYTE aTXCTRL = 0x30;


union{
  BYTE byte;
  struct {
	unsigned char BRP :5;	
	unsigned char  SJW:4; 	
  }bits;

}CNF1; 
BYTE aCNF1 = 0x2a;


union {
  BYTE byte;
  struct {
	unsigned char PRSEG :3;	
	unsigned char  PHSEG1 :3;
	unsigned char  SAM :1;
	unsigned char  BTLMODE :1;
		
		 	
  }bits;

}CNF2; 
BYTE aCNF2 = 0x29;

union {
  BYTE byte;
  struct {
	unsigned char PHSEG2 :3;	
	unsigned char   :3;
	unsigned char  WAKFIL :1;
	unsigned char  SOF :1; 
		
		 	
  }bits;

}CNF3; 
BYTE aCNF3 = 0x28;

union {
  BYTE byte;
  struct {
	unsigned char CLKPRE :2;	
	unsigned char  CLKEN :1;
	unsigned char  OSM :1;
	unsigned char  ABAT :1;
	unsigned char REQOP :3;
	// 000 =  ノーマル・オペレーション・モード
	// 001 = スリープ・モード
	// 010 = ループバック・モード
	// 011 = リスン・オンリ・モード
	// 100 = コンフィギュレーション・モード　(デフォルト)
  }bits;

}CANCTRL; 
BYTE aCANCTRL = 0x0f;

void SPI1PortInit();

void SPI1Init(void)
{
  void SPI1PortInit();
	
  //config SPI1
    
  SPI1STATbits.SPIEN 		= 0;	// disable SPI port
  SPI1STATbits.SPISIDL 	= 0; 	// Continue module operation in Idle mode
    
  SPI1BUF 				= 0;   	// clear SPI buffer
    
  IFS0bits.SPI1IF 		= 0;	// clear interrupt flag
  IEC0bits.SPI1IE 		= 0;	// disable interrupt
    
  SPI1CON1bits.DISSCK		= 0;	// Internal SPIx clock is enabled
  SPI1CON1bits.DISSDO		= 0;	// SDOx pin is controlled by the module
  SPI1CON1bits.MODE16 	= 0;	// set in 16-bit mode, clear in 8-bit mode
  SPI1CON1bits.SMP		= 1;	// Input data sampled at middle of data output time
  SPI1CON1bits.CKP 		= 0;	// CKP and CKE is subject to change ...
  SPI1CON1bits.CKE 		= 1;	// ... based on your communication mode.
  SPI1CON1bits.MSTEN 		= 1; 	// 1 =  Master mode; 0 =  Slave mode
  SPI1CON1bits.SPRE 		= 4; 	// Secondary Prescaler = 4:1
  SPI1CON1bits.PPRE 		= 2; 	// Primary Prescaler = 4:1
	
  SPI1CON2 				= 0;	// non-framed mode

	
  SPI1STATbits.SPIEN 		= 1; 	// enable SPI port, clear status


}


BYTE writeSPI1( BYTE data )
{
  SPI1BUF = data;			// write to buffer for TX
  while(!SPI1STATbits.SPIRBF);	// wait for transfer to complete
  return SPI1BUF;    			// read the received value
}//writeSPI1



//Read = 0x03
//Write = 0x02
//Read Status = 0xa0
//BitMod = 0x05
BYTE Read(BYTE adrs){
	
  BYTE data;
  SS = 0;
  writeSPI1(0x03);
  writeSPI1(adrs);
  writeSPI1(0);
  data = SPI1BUF;
  SS = 1;
	
	
  return data;

}

void Write(BYTE adrs, BYTE data){

  SS = 0;
  writeSPI1(0x02);
  writeSPI1(adrs);
  writeSPI1(data);
  SS = 1;

}


void BitMod(BYTE adrs, BYTE msk, BYTE data){
	
  SS = 0;
  writeSPI1(0x05);
  writeSPI1(adrs);
  writeSPI1(msk);
  writeSPI1(data);
  SS = 1;

}





void C_Write(BYTE *data)
{	
  int i;
  SS = 0;
  writeSPI1(0x40);
  for(i = 0; i < 13; i++){
	writeSPI1(*(data + i));
		
  }	 
  SS = 1;
		
}	
	
BYTE StRead()
{
  BYTE data;
  SS = 0;
  writeSPI1(0xa0);
  data = writeSPI1(0);
  SS =1;
	
  return data;
}	
	


void CANInit()
{
	
	
  CNF1.bits.BRP = 4;
  CNF2.bits.PRSEG = 1;
  CNF2.bits.PHSEG1 = 6;
  CANCTRL.byte = 0x07;			 //ノーマルモードに設定
  BitMod(0x0c, 0x14, 0x14);
  Write(aCNF1, CNF1.byte);
  Write(aCNF2, CNF2.byte);
  Write(aCANCTRL, CANCTRL.byte);
	
	
}
