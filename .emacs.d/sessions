;;; -*- coding: utf-8-unix; -*-
;;; Automatically generated on Thu May 15 22:30:00 2014
;;; Invoked by rasorasi@rasorasi-01 using 24.3.1
(setq-default kill-ring '(#("(custom-set-variables '(helm-ff-auto-update-initial-value nil))
" 0 63 (fontified t) 63 64 (fontified t)) #("(require 'helm-config)
(require 'helm-descbinds)
(global-set-key (kbd \"C-z\") 'helm-mini)
(helm-mode 1)
;(custom-set-variables '(helm-ff-auto-update-initial-value nil))
p;(define-key helm-read-file-map (kbd \"<tab>\") 'helm-execute-persistent-action)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 21 (face font-lock-constant-face fontified t) 21 24 (fontified t) 24 31 (face font-lock-keyword-face fontified t) 31 33 (fontified t) 33 47 (face font-lock-constant-face fontified t) 47 70 (fontified t) 70 75 (face font-lock-string-face fontified t) 75 89 (fontified t) 89 103 (fontified t) 103 104 (face font-lock-comment-delimiter-face fontified t) 104 168 (face font-lock-comment-face fontified t) 168 169 (fontified t) 169 170 (face font-lock-comment-delimiter-face fontified t) 170 248 (face font-lock-comment-face fontified t)) #("(require 'helm-config)
(require 'helm-descbinds)
(global-set-key (kbd \"C-z\") 'helm-mini)
(helm-mode 1)
;(custom-set-variables '(helm-ff-auto-update-initial-value nil))
(define-key helm-read-file-map (kbd \"C-h\") 'delete-backward-char)
(custom-set-variables '(helm-ff-auto-update-initial-value nil))
(define-key helm-c-read-file-map (kbd \"TAB\") 'helm-execute-persistent-action)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 21 (face font-lock-constant-face fontified t) 21 24 (fontified t) 24 31 (face font-lock-keyword-face fontified t) 31 33 (fontified t) 33 47 (face font-lock-constant-face fontified t) 47 70 (fontified t) 70 75 (face font-lock-string-face fontified t) 75 103 (fontified t) 103 104 (face font-lock-comment-delimiter-face fontified t) 104 168 (face font-lock-comment-face fontified t) 168 204 (fontified t) 204 209 (face font-lock-string-face fontified t) 209 234 (fontified t) 234 298 (fontified t) 298 336 (fontified t) 336 341 (face font-lock-string-face fontified t) 341 375 (fontified t) 375 376 (fontified t)) #(";(define-key helm-read-file-map (kbd \"<tab>\") 'helm-execute-persistent-action)
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 78 (fontified t face font-lock-comment-face) 78 79 (fontified t)) #("(define-key helm-c-read-file-map (kbd \"C-h\") 'delete-backward-char)
" 0 38 (fontified t) 38 43 (fontified t face font-lock-string-face) 43 67 (fontified t) 67 68 (fontified t)) #("
" 0 1 (fontified t)) #(";; TABで任意補完。選択肢が出てきたらC-nやC-pで上下移動してから決定することも可能
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 46 (fontified t face font-lock-comment-face) 46 47 (fontified t)) #(";; C-hでバックスペースと同じように文字を削除  " 0 3 (face font-lock-comment-delimiter-face fontified t) 3 27 (face font-lock-comment-face fontified t)) #(";; 自動補完を無効" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 10 (face font-lock-comment-face fontified t))))
(setq-default session-file-alist '(("~/projects/dotfiles/.emacs.d/init.el" 10987 10523 1 nil nil 10756 (overwrite-mode)) ("~/sinit.el" 10901 10525 1 nil nil 10759 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/.scratch" 2581 nil 1 nil nil 2581 (overwrite-mode))))
(setq-default file-name-history '("~/sinit.el" "~/projects/dotfiles/.emacs.d/.scratch" "~/.emacs.d/.scratch" "~/projects/dotfiles/.emacs.d/init.el" "~/.emacs.d/elpa/session-2.2.1/session-autoloads.el" "~/.emacs.d/init.el" "~/.emacs.d/session.103f09bffb247d03aa139999485311147100000013190038" "~/univ/140510.c" "~/test/hello.c" "~/" "~/test/" "~/.emacs.d/elpa/archives/marmalade/archive-contents" "~/.emacs.d/elpa/archives/ELPA/archive-contents" "~/.emacs.d/elpa/flycheck-0.18/flycheck-autoloads.el" "~/.emacs.d/elpa/s-1.9.0/s-autoloads.el" "~/.emacs.d/elpa/dash-2.5.0/dash-autoloads.el" "~/.emacs.d/elpa/f-0.11.0/f-autoloads.el" "~/.emacs.d/elpa/pkg-info-0.5/pkg-info-autoloads.el" "~/.emacs.d/elpa/epl-0.7/epl-autoloads.el" "~/univ/140509.c" "~/test/Makefile" "~/Qt/test/mainwindow.h" "~/Qt/test/" "~/Qt/" "~/projects/dotfiles/.emacs.d/elpa/chess-1.96/" "~/projects/dotfiles/.emacs.d/elpa/" "~/projects/dotfiles/.emacs.d/elisp/" "~/projects/dotfiles/.emacs.d/" "~/c/test.c" "~/Qt/mainwindow.cpp"))
(setq-default anything-c-source-complete-shell-history '((name . "Shell History") (init lambda nil (require (quote shell-history)) (with-current-buffer (anything-candidate-buffer (shell-history-buffer)) (revert-buffer t t) (set (make-local-variable (quote zsh-p)) (shell-history-zsh-extended-history-p)))) (get-line . acsh-get-line) (search-from-end) (type . complete)))
(setq-default anything-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default anything-c-source-eshell-history '((name . "Eshell history") (init lambda nil (let (eshell-hist-ignoredups) (eshell-write-history eshell-history-file-name t) (with-current-buffer (anything-candidate-buffer (quote global)) (insert-file-contents eshell-history-file-name))) (remove-hook (quote minibuffer-setup-hook) (quote eshell-mode))) (candidates-in-buffer) (keymap keymap (27 keymap (112 . anything-next-line)) keymap (23 . anything-yank-text-at-point) (24 keymap (6 . anything-quit-and-find-file)) (help keymap (109 . anything-help)) (67108927 keymap (109 . anything-help)) (8 keymap (109 . anything-help)) (f1 keymap (109 . anything-help)) (3 keymap (24 keymap (2 . anything-send-bug-report-from-anything) (13 . anything-display-all-visible-marks) (4 . anything-debug-output)) (21 . anything-force-update) (6 . anything-follow-mode) (11 . anything-kill-selection-and-quit) (25 . anything-yank-selection) (4 . anything-delete-current-selection)) (67108987 . anything-enlarge-window) (67108989 . anything-narrow-window) (20 . anything-toggle-resplit-window) (18 . undefined) (11 . anything-delete-minibuffer-contents) (67108896 . anything-toggle-visible-mark) (C-M-up . anything-scroll-other-window-down) (C-M-down . anything-scroll-other-window) (M-prior . anything-scroll-other-window-down) (M-next . anything-scroll-other-window) (15 . anything-next-source) (5 . anything-select-2nd-action-or-end-of-line) (26 . anything-execute-persistent-action) (90 . anything-select-with-digit-shortcut) (89 . anything-select-with-digit-shortcut) (88 . anything-select-with-digit-shortcut) (87 . anything-select-with-digit-shortcut) (86 . anything-select-with-digit-shortcut) (85 . anything-select-with-digit-shortcut) (84 . anything-select-with-digit-shortcut) (83 . anything-select-with-digit-shortcut) (82 . anything-select-with-digit-shortcut) (81 . anything-select-with-digit-shortcut) (80 . anything-select-with-digit-shortcut) (79 . anything-select-with-digit-shortcut) (78 . anything-select-with-digit-shortcut) (77 . anything-select-with-digit-shortcut) (76 . anything-select-with-digit-shortcut) (75 . anything-select-with-digit-shortcut) (74 . anything-select-with-digit-shortcut) (73 . anything-select-with-digit-shortcut) (72 . anything-select-with-digit-shortcut) (71 . anything-select-with-digit-shortcut) (70 . anything-select-with-digit-shortcut) (69 . anything-select-with-digit-shortcut) (68 . anything-select-with-digit-shortcut) (67 . anything-select-with-digit-shortcut) (66 . anything-select-with-digit-shortcut) (65 . anything-select-with-digit-shortcut) (67108921 . anything-select-with-digit-shortcut) (67108920 . anything-select-with-digit-shortcut) (67108919 . anything-select-with-digit-shortcut) (67108918 . anything-select-with-digit-shortcut) (67108917 . anything-select-with-digit-shortcut) (67108916 . anything-select-with-digit-shortcut) (67108915 . anything-select-with-digit-shortcut) (67108914 . anything-select-with-digit-shortcut) (67108913 . anything-select-with-digit-shortcut) (left . anything-previous-source) (right . anything-next-source) (22 . anything-next-page) (16 . anything-previous-line) (14 . anything-next-line) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . anything-help))) (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . anything-select-3rd-action) (13 . anything-exit-minibuffer) (7 . anything-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . anything-select-action) (XF86Back . previous-history-element) (up . anything-previous-line) (prior . anything-previous-page) (XF86Forward . next-history-element) (down . anything-next-line) (next . anything-next-page) (27 keymap (109 . anything-toggle-all-marks) (93 . anything-next-visible-mark) (91 . anything-prev-visible-mark) (32 . anything-toggle-visible-mark) (33554454 . anything-scroll-other-window-down) (25 . anything-scroll-other-window-down) (22 . anything-scroll-other-window) (62 . anything-end-of-buffer) (60 . anything-beginning-of-buffer) (118 . anything-previous-page) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (filtered-candidate-transformer lambda (candidates sources) (reverse candidates)) (candidate-number-limit . 9999) (action lambda (candidate) (eshell-kill-input) (insert candidate))))
(setq-default anything-c-source-extended-command-history '((name . "Emacs Commands History") (candidates lambda nil (anything-fast-remove-dups extended-command-history :test (quote equal))) (type . command)))
(setq-default anything-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (match anything-c-match-on-basename) (type . file)))
(setq-default anything-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . anything-c-source-global-mark-ring-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (anything-c-switch-to-buffer (second items)) (anything-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (anything-c-switch-to-buffer (second items)) (anything-goto-line (string-to-number (car items))) (anything-match-line-color-current-line))) (persistent-help . "Show this line")))
(setq-default anything-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (anything-attrset (quote last-command) last-command)) (candidates . anything-c-kill-ring-candidates) (filtered-candidate-transformer anything-c-kill-ring-transformer) (action . anything-c-kill-ring-action) (keymap keymap (27 keymap (117 . anything-previous-line) (121 . anything-next-line)) keymap (23 . anything-yank-text-at-point) (24 keymap (6 . anything-quit-and-find-file)) (help keymap (109 . anything-help)) (67108927 keymap (109 . anything-help)) (8 keymap (109 . anything-help)) (f1 keymap (109 . anything-help)) (3 keymap (24 keymap (2 . anything-send-bug-report-from-anything) (13 . anything-display-all-visible-marks) (4 . anything-debug-output)) (21 . anything-force-update) (6 . anything-follow-mode) (11 . anything-kill-selection-and-quit) (25 . anything-yank-selection) (4 . anything-delete-current-selection)) (67108987 . anything-enlarge-window) (67108989 . anything-narrow-window) (20 . anything-toggle-resplit-window) (18 . undefined) (11 . anything-delete-minibuffer-contents) (67108896 . anything-toggle-visible-mark) (C-M-up . anything-scroll-other-window-down) (C-M-down . anything-scroll-other-window) (M-prior . anything-scroll-other-window-down) (M-next . anything-scroll-other-window) (15 . anything-next-source) (5 . anything-select-2nd-action-or-end-of-line) (26 . anything-execute-persistent-action) (90 . anything-select-with-digit-shortcut) (89 . anything-select-with-digit-shortcut) (88 . anything-select-with-digit-shortcut) (87 . anything-select-with-digit-shortcut) (86 . anything-select-with-digit-shortcut) (85 . anything-select-with-digit-shortcut) (84 . anything-select-with-digit-shortcut) (83 . anything-select-with-digit-shortcut) (82 . anything-select-with-digit-shortcut) (81 . anything-select-with-digit-shortcut) (80 . anything-select-with-digit-shortcut) (79 . anything-select-with-digit-shortcut) (78 . anything-select-with-digit-shortcut) (77 . anything-select-with-digit-shortcut) (76 . anything-select-with-digit-shortcut) (75 . anything-select-with-digit-shortcut) (74 . anything-select-with-digit-shortcut) (73 . anything-select-with-digit-shortcut) (72 . anything-select-with-digit-shortcut) (71 . anything-select-with-digit-shortcut) (70 . anything-select-with-digit-shortcut) (69 . anything-select-with-digit-shortcut) (68 . anything-select-with-digit-shortcut) (67 . anything-select-with-digit-shortcut) (66 . anything-select-with-digit-shortcut) (65 . anything-select-with-digit-shortcut) (67108921 . anything-select-with-digit-shortcut) (67108920 . anything-select-with-digit-shortcut) (67108919 . anything-select-with-digit-shortcut) (67108918 . anything-select-with-digit-shortcut) (67108917 . anything-select-with-digit-shortcut) (67108916 . anything-select-with-digit-shortcut) (67108915 . anything-select-with-digit-shortcut) (67108914 . anything-select-with-digit-shortcut) (67108913 . anything-select-with-digit-shortcut) (left . anything-previous-source) (right . anything-next-source) (22 . anything-next-page) (16 . anything-previous-line) (14 . anything-next-line) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . anything-help))) (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . anything-select-3rd-action) (13 . anything-exit-minibuffer) (7 . anything-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . anything-select-action) (XF86Back . previous-history-element) (up . anything-previous-line) (prior . anything-previous-page) (XF86Forward . next-history-element) (down . anything-next-line) (next . anything-next-page) (27 keymap (109 . anything-toggle-all-marks) (93 . anything-next-visible-mark) (91 . anything-prev-visible-mark) (32 . anything-toggle-visible-mark) (33554454 . anything-scroll-other-window-down) (25 . anything-scroll-other-window-down) (22 . anything-scroll-other-window) (62 . anything-end-of-buffer) (60 . anything-beginning-of-buffer) (118 . anything-previous-page) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command) (migemo) (multiline)))
(setq-default anything-c-source-mark-ring '((name . "mark-ring") (init lambda nil (setq anything-mark-ring-cache (ignore-errors (anything-c-source-mark-ring-candidates)))) (candidates lambda nil (anything-aif anything-mark-ring-cache it)) (action ("Goto line" lambda (candidate) (anything-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (anything-goto-line (string-to-number candidate)) (anything-match-line-color-current-line)) (persistent-help . "Show this line")))
(setq-default anything-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default command-history '((exit nil) (execute-extended-command nil "exit") (package-refresh-contents) (execute-extended-command nil "package-refresh-contents") (find-file "/home/rasorasi/sinit.el" t)))
(setq-default extended-command-history '("exit" "package-refresh-contents"))
(setq-default global-mark-ring 'nil)
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/home/" "/home/rasorasi/projects/dotfiles/.emacs.d/" "/home/rasorasi/"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("/home/rasorasi/sinit.el"))
(setq-default occur-collect-regexp-history '("\\1"))
