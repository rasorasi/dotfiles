;;; -*- coding: utf-8-unix; -*-
;;; Automatically generated on Sat Jun 21 13:16:24 2014
;;; Invoked by rasorasi@rasorasi-01 using 24.3.1
(setq-default kill-ring '(#("	int a;" 0 1 (fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 7 (fontified t)) #("SPI.h\"" 0 1 (category c-cpp-delimiter c-in-sws t fontified t) 1 2 (c-in-sws t fontified t) 2 3 (c-in-sws t fontified t) 3 5 (fontified t) 5 6 (category c-cpp-delimiter face font-lock-warning-face fontified t)) #("1	" 0 2 (fontified t)) #("89 :1;" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 6 (fontified t)) #("20002	:1;" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 9 (fontified t)) #("1;" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t)) #("		unsinged cahr a :1;" 0 2 (fontified t) 2 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face c-type c-decl-id-start fontified t) 15 16 (fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 21 (fontified t)) #(";(global-set-key (kbd \"M-i\") ')
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 31 (fontified t face font-lock-comment-face) 31 32 (fontified t)) #("		unsigned char a1 :1;" 0 2 (fontified t) 2 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-type-face fontified t) 14 15 (face font-lock-type-face c-type c-decl-id-start fontified t) 15 16 (fontified t) 16 18 (face font-lock-variable-name-face fontified t) 18 22 (fontified t)) #("	//SPIポート設定
	//TRISBbits.TRISB0 = 0; //SS_out	
	//RPOR1bits.RP2R = 7; // SDO
	//RPINR20bits.SDI1R = 1; //SDI 
	//RPOR1bits.RP3R = 8; // SCK
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 2 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2 3 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3 12 (c-in-sws t face font-lock-comment-face fontified t) 12 13 (c-in-sws t fontified t) 13 15 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 15 47 (c-in-sws t face font-lock-comment-face fontified t) 47 48 (c-in-sws t fontified t) 48 50 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 50 77 (c-in-sws t face font-lock-comment-face fontified t) 77 78 (c-in-sws t fontified t) 78 80 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 80 110 (c-in-sws t face font-lock-comment-face fontified t) 110 111 (c-in-sws t fontified t) 111 113 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 113 140 (c-in-sws t face font-lock-comment-face fontified t)) #("{
	//SPIポート設定
	//TRISBbits.TRISB0 = 0; //SS_out	
	//RPOR1bits.RP2R = 7; // SDO
	//RPINR20bits.SDI1R = 1; //SDI 
	//RPOR1bits.RP3R = 8; // SCK
	
    //config SPI1
    
	SPI1STATbits.SPIEN 		= 0;	// disable SPI port
	SPI1STATbits.SPISIDL 	= 0; 	// Continue module operation in Idle mode
    
	SPI1BUF 				= 0;   	// clear SPI buffer
    
	IFS0bits.SPI1IF 		= 0;	// clear interrupt flag
	IEC0bits.SPI1IE 		= 0;	// disable interrupt
    
	SPI1CON1bits.DISSCK		= 0;	// Internal SPIx clock is enabled
	SPI1CON1bits.DISSDO		= 0;	// SDOx pin is controlled by the module
	SPI1CON1bits.MODE16 	= 0;	// set in 16-bit mode, clear in 8-bit mode
	SPI1CON1bits.SMP		= 1;	// Input data sampled at middle of data output time
	SPI1CON1bits.CKP 		= 0;	// CKP and CKE is subject to change ...
	SPI1CON1bits.CKE 		= 1;	// ... based on your communication mode.
	SPI1CON1bits.MSTEN 		= 1; 	// 1 =  Master mode; 0 =  Slave mode
	SPI1CON1bits.SPRE 		= 4; 	// Secondary Prescaler = 4:1
	SPI1CON1bits.PPRE 		= 2; 	// Primary Prescaler = 4:1
	
	SPI1CON2 				= 0;	// non-framed mode

	
	SPI1STATbits.SPIEN 		= 1; 	// enable SPI port, clear status


}
" 0 2 (fontified t) 2 3 (c-is-sws t c-in-sws t fontified t) 3 4 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 4 5 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 5 14 (face font-lock-comment-face c-in-sws t fontified t) 14 15 (c-in-sws t fontified t) 15 17 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 17 49 (face font-lock-comment-face c-in-sws t fontified t) 49 50 (c-in-sws t fontified t) 50 52 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 52 79 (face font-lock-comment-face c-in-sws t fontified t) 79 80 (c-in-sws t fontified t) 80 82 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 82 112 (face font-lock-comment-face c-in-sws t fontified t) 112 113 (c-in-sws t fontified t) 113 115 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 115 142 (face font-lock-comment-face c-in-sws t fontified t) 142 148 (c-in-sws t fontified t) 148 150 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 150 162 (face font-lock-comment-face c-in-sws t fontified t) 162 167 (c-in-sws t fontified t) 167 168 (c-in-sws t c-is-sws t fontified t) 168 169 (c-is-sws t fontified t) 169 193 (fontified t) 193 194 (c-is-sws t c-in-sws t fontified t) 194 195 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 195 197 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 197 214 (face font-lock-comment-face c-in-sws t fontified t) 214 215 (c-in-sws t c-is-sws t fontified t) 215 216 (c-is-sws t fontified t) 216 241 (fontified t) 241 243 (c-is-sws t c-in-sws t fontified t) 243 244 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 244 246 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 246 285 (face font-lock-comment-face c-in-sws t fontified t) 285 290 (c-in-sws t fontified t) 290 291 (c-in-sws t c-is-sws t fontified t) 291 292 (c-is-sws t fontified t) 292 307 (fontified t) 307 311 (c-is-sws t c-in-sws t fontified t) 311 312 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 312 314 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 314 331 (face font-lock-comment-face c-in-sws t fontified t) 331 336 (c-in-sws t fontified t) 336 337 (c-in-sws t c-is-sws t fontified t) 337 338 (c-is-sws t fontified t) 338 359 (fontified t) 359 360 (c-is-sws t c-in-sws t fontified t) 360 361 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 361 363 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 363 384 (face font-lock-comment-face c-in-sws t fontified t) 384 385 (c-in-sws t c-is-sws t fontified t) 385 386 (c-is-sws t fontified t) 386 407 (fontified t) 407 408 (c-is-sws t c-in-sws t fontified t) 408 409 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 409 411 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 411 429 (face font-lock-comment-face c-in-sws t fontified t) 429 430 (c-in-sws t fontified t) 430 434 (c-in-sws t fontified t) 434 435 (c-in-sws t c-is-sws t fontified t) 435 436 (c-is-sws t fontified t) 436 460 (fontified t) 460 461 (c-is-sws t c-in-sws t fontified t) 461 462 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 462 464 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 464 495 (face font-lock-comment-face c-in-sws t fontified t) 495 496 (c-is-sws t fontified t) 496 497 (fontified t) 497 521 (fontified t) 521 522 (c-is-sws t c-in-sws t fontified t) 522 523 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 523 525 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 525 562 (face font-lock-comment-face c-in-sws t fontified t) 562 563 (c-in-sws t c-is-sws t fontified t) 563 564 (c-is-sws t fontified t) 564 588 (fontified t) 588 589 (c-is-sws t c-in-sws t fontified t) 589 590 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 590 592 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 592 632 (face font-lock-comment-face c-in-sws t fontified t) 632 633 (c-in-sws t c-is-sws t fontified t) 633 634 (c-is-sws t fontified t) 634 655 (fontified t) 655 656 (c-is-sws t c-in-sws t fontified t) 656 657 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 657 659 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 659 708 (face font-lock-comment-face c-in-sws t fontified t) 708 709 (c-in-sws t c-is-sws t fontified t) 709 710 (c-is-sws t fontified t) 710 732 (fontified t) 732 733 (c-is-sws t c-in-sws t fontified t) 733 734 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 734 736 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 736 773 (face font-lock-comment-face c-in-sws t fontified t) 773 774 (c-in-sws t c-is-sws t fontified t) 774 775 (c-is-sws t fontified t) 775 797 (fontified t) 797 798 (c-is-sws t c-in-sws t fontified t) 798 799 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 799 801 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 801 839 (face font-lock-comment-face c-in-sws t fontified t) 839 840 (c-in-sws t c-is-sws t fontified t) 840 841 (c-is-sws t fontified t) 841 865 (fontified t) 865 867 (c-is-sws t c-in-sws t fontified t) 867 868 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 868 870 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 870 904 (face font-lock-comment-face c-in-sws t fontified t) 904 905 (c-in-sws t c-is-sws t fontified t) 905 906 (c-is-sws t fontified t) 906 929 (fontified t) 929 931 (c-is-sws t c-in-sws t fontified t) 931 932 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 932 934 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 934 960 (face font-lock-comment-face c-in-sws t fontified t) 960 961 (c-in-sws t c-is-sws t fontified t) 961 962 (c-is-sws t fontified t) 962 985 (fontified t) 985 987 (c-is-sws t c-in-sws t fontified t) 987 988 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 988 990 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 990 1014 (face font-lock-comment-face c-in-sws t fontified t) 1014 1015 (c-is-sws t fontified t) 1015 1016 (fontified t) 1016 1017 (fontified t) 1017 1018 (fontified t) 1018 1034 (fontified t) 1034 1035 (c-is-sws t c-in-sws t fontified t) 1035 1036 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 1036 1038 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 1038 1054 (face font-lock-comment-face c-in-sws t fontified t) 1054 1057 (c-in-sws t fontified t) 1057 1058 (c-in-sws t c-is-sws t fontified t) 1058 1059 (c-is-sws t fontified t) 1059 1083 (fontified t) 1083 1085 (c-is-sws t c-in-sws t fontified t) 1085 1086 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 1086 1088 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 1088 1118 (face font-lock-comment-face c-in-sws t fontified t) 1118 1120 (c-in-sws t fontified t) 1120 1121 (c-is-sws t fontified t) 1121 1122 (rear-nonsticky t fontified t)) #("void SPI1Init(void)
{
	//SPIポート設定
	//TRISBbits.TRISB0 = 0; //SS_out	
	//RPOR1bits.RP2R = 7; // SDO
	//RPINR20bits.SDI1R = 1; //SDI 
	//RPOR1bits.RP3R = 8; // SCK
	
    //config SPI1
    
	SPI1STATbits.SPIEN 		= 0;	// disable SPI port
	SPI1STATbits.SPISIDL 	= 0; 	// Continue module operation in Idle mode
    
	SPI1BUF 				= 0;   	// clear SPI buffer
    
	IFS0bits.SPI1IF 		= 0;	// clear interrupt flag
	IEC0bits.SPI1IE 		= 0;	// disable interrupt
    
	SPI1CON1bits.DISSCK		= 0;	// Internal SPIx clock is enabled
	SPI1CON1bits.DISSDO		= 0;	// SDOx pin is controlled by the module
	SPI1CON1bits.MODE16 	= 0;	// set in 16-bit mode, clear in 8-bit mode
	SPI1CON1bits.SMP		= 1;	// Input data sampled at middle of data output time
	SPI1CON1bits.CKP 		= 0;	// CKP and CKE is subject to change ...
	SPI1CON1bits.CKE 		= 1;	// ... based on your communication mode.
	SPI1CON1bits.MSTEN 		= 1; 	// 1 =  Master mode; 0 =  Slave mode
	SPI1CON1bits.SPRE 		= 4; 	// Secondary Prescaler = 4:1
	SPI1CON1bits.PPRE 		= 2; 	// Primary Prescaler = 4:1
	
	SPI1CON2 				= 0;	// non-framed mode

	
	SPI1STATbits.SPIEN 		= 1; 	// enable SPI port, clear status


}

" 0 1 (face font-lock-type-face c-is-sws t fontified t) 1 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t) 5 13 (face font-lock-function-name-face fontified t) 13 14 (c-type c-decl-arg-start fontified t) 14 18 (face font-lock-type-face fontified t) 18 22 (fontified t) 22 23 (c-is-sws t c-in-sws t fontified t) 23 24 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 24 25 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 25 34 (face font-lock-comment-face c-in-sws t fontified t) 34 35 (c-in-sws t fontified t) 35 37 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 37 69 (face font-lock-comment-face c-in-sws t fontified t) 69 70 (c-in-sws t fontified t) 70 72 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 72 99 (face font-lock-comment-face c-in-sws t fontified t) 99 100 (c-in-sws t fontified t) 100 102 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 102 132 (face font-lock-comment-face c-in-sws t fontified t) 132 133 (c-in-sws t fontified t) 133 135 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 135 162 (face font-lock-comment-face c-in-sws t fontified t) 162 168 (c-in-sws t fontified t) 168 170 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 170 182 (face font-lock-comment-face c-in-sws t fontified t) 182 187 (c-in-sws t fontified t) 187 188 (c-in-sws t c-is-sws t fontified t) 188 189 (c-is-sws t fontified t) 189 213 (fontified t) 213 214 (c-is-sws t c-in-sws t fontified t) 214 215 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 215 217 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 217 234 (face font-lock-comment-face c-in-sws t fontified t) 234 235 (c-in-sws t c-is-sws t fontified t) 235 236 (c-is-sws t fontified t) 236 261 (fontified t) 261 263 (c-is-sws t c-in-sws t fontified t) 263 264 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 264 266 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 266 305 (face font-lock-comment-face c-in-sws t fontified t) 305 310 (c-in-sws t fontified t) 310 311 (c-in-sws t c-is-sws t fontified t) 311 312 (c-is-sws t fontified t) 312 327 (fontified t) 327 331 (c-is-sws t c-in-sws t fontified t) 331 332 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 332 334 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 334 351 (face font-lock-comment-face c-in-sws t fontified t) 351 356 (c-in-sws t fontified t) 356 357 (c-in-sws t c-is-sws t fontified t) 357 358 (c-is-sws t fontified t) 358 379 (fontified t) 379 380 (c-is-sws t c-in-sws t fontified t) 380 381 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 381 383 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 383 404 (face font-lock-comment-face c-in-sws t fontified t) 404 405 (c-in-sws t c-is-sws t fontified t) 405 406 (c-is-sws t fontified t) 406 427 (fontified t) 427 428 (c-is-sws t c-in-sws t fontified t) 428 429 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 429 431 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 431 449 (face font-lock-comment-face c-in-sws t fontified t) 449 450 (c-in-sws t fontified t) 450 454 (c-in-sws t fontified t) 454 455 (c-in-sws t c-is-sws t fontified t) 455 456 (c-is-sws t fontified t) 456 480 (fontified t) 480 481 (c-is-sws t c-in-sws t fontified t) 481 482 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 482 484 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 484 515 (face font-lock-comment-face c-in-sws t fontified t) 515 516 (c-is-sws t fontified t) 516 517 (fontified t) 517 541 (fontified t) 541 542 (c-is-sws t c-in-sws t fontified t) 542 543 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 543 545 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 545 582 (face font-lock-comment-face c-in-sws t fontified t) 582 583 (c-in-sws t c-is-sws t fontified t) 583 584 (c-is-sws t fontified t) 584 608 (fontified t) 608 609 (c-is-sws t c-in-sws t fontified t) 609 610 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 610 612 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 612 652 (face font-lock-comment-face c-in-sws t fontified t) 652 653 (c-in-sws t c-is-sws t fontified t) 653 654 (c-is-sws t fontified t) 654 675 (fontified t) 675 676 (c-is-sws t c-in-sws t fontified t) 676 677 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 677 679 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 679 728 (face font-lock-comment-face c-in-sws t fontified t) 728 729 (c-in-sws t c-is-sws t fontified t) 729 730 (c-is-sws t fontified t) 730 752 (fontified t) 752 753 (c-is-sws t c-in-sws t fontified t) 753 754 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 754 756 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 756 793 (face font-lock-comment-face c-in-sws t fontified t) 793 794 (c-in-sws t c-is-sws t fontified t) 794 795 (c-is-sws t fontified t) 795 817 (fontified t) 817 818 (c-is-sws t c-in-sws t fontified t) 818 819 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 819 821 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 821 859 (face font-lock-comment-face c-in-sws t fontified t) 859 860 (c-in-sws t c-is-sws t fontified t) 860 861 (c-is-sws t fontified t) 861 885 (fontified t) 885 887 (c-is-sws t c-in-sws t fontified t) 887 888 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 888 890 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 890 924 (face font-lock-comment-face c-in-sws t fontified t) 924 925 (c-in-sws t c-is-sws t fontified t) 925 926 (c-is-sws t fontified t) 926 949 (fontified t) 949 951 (c-is-sws t c-in-sws t fontified t) 951 952 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 952 954 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 954 980 (face font-lock-comment-face c-in-sws t fontified t) 980 981 (c-in-sws t c-is-sws t fontified t) 981 982 (c-is-sws t fontified t) 982 1005 (fontified t) 1005 1007 (c-is-sws t c-in-sws t fontified t) 1007 1008 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 1008 1010 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 1010 1034 (face font-lock-comment-face c-in-sws t fontified t) 1034 1035 (c-is-sws t fontified t) 1035 1036 (fontified t) 1036 1037 (fontified t) 1037 1038 (fontified t) 1038 1054 (fontified t) 1054 1055 (c-is-sws t c-in-sws t fontified t) 1055 1056 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 1056 1058 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 1058 1074 (face font-lock-comment-face c-in-sws t fontified t) 1074 1077 (c-in-sws t fontified t) 1077 1078 (c-in-sws t c-is-sws t fontified t) 1078 1079 (c-is-sws t fontified t) 1079 1103 (fontified t) 1103 1105 (c-is-sws t c-in-sws t fontified t) 1105 1106 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 1106 1108 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 1108 1138 (face font-lock-comment-face c-in-sws t fontified t) 1138 1140 (c-in-sws t fontified t) 1140 1141 (c-is-sws t fontified t) 1141 1142 (rear-nonsticky t fontified t) 1142 1143 (fontified t)) #("#include\"p24FJ64GA002.h\"" 0 1 (category c-cpp-delimiter c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 24 (c-in-sws t face font-lock-string-face fontified t)) #(";(global-set-key (kbd \"M-l\") ')" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-face fontified t) 3 31 (face font-lock-comment-face fontified t)) #("lobal-set-key (kbd \"M-l\") ')" 0 28 (face font-lock-comment-face fontified t)) #("void SPI1Init(void)
{
	//SPIポート設定
	//TRISBbits.TRISB0 = 0; //SS_out	
	//RPOR1bits.RP2R = 7; // SDO
	//RPINR20bits.SDI1R = 1; //SDI 
	//RPOR1bits.RP3R = 8; // SCK
	
    //config SPI1
    
	SPI1STATbits.SPIEN 		= 0;	// disable SPI port
	SPI1STATbits.SPISIDL 	= 0; 	// Continue module operation in Idle mode
    
	SPI1BUF 				= 0;   	// clear SPI buffer
    
	IFS0bits.SPI1IF 		= 0;	// clear interrupt flag
	IEC0bits.SPI1IE 		= 0;	// disable interrupt
    
	SPI1CON1bits.DISSCK		= 0;	// Internal SPIx clock is enabled
	SPI1CON1bits.DISSDO		= 0;	// SDOx pin is controlled by the module
	SPI1CON1bits.MODE16 	= 0;	// set in 16-bit mode, clear in 8-bit mode
	SPI1CON1bits.SMP		= 1;	// Input data sampled at middle of data output time
	SPI1CON1bits.CKP 		= 0;	// CKP and CKE is subject to change ...
	SPI1CON1bits.CKE 		= 1;	// ... based on your communication mode.
	SPI1CON1bits.MSTEN 		= 1; 	// 1 =  Master mode; 0 =  Slave mode
	SPI1CON1bits.SPRE 		= 4; 	// Secondary Prescaler = 4:1
	SPI1CON1bits.PPRE 		= 2; 	// Primary Prescaler = 4:1
	
	SPI1CON2 				= 0;	// non-framed mode

	
	SPI1STATbits.SPIEN 		= 1; 	// enable SPI port, clear status


}
" 0 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t) 4 5 (fontified t) 5 13 (face font-lock-function-name-face fontified t) 13 14 (c-type c-decl-arg-start fontified t) 14 18 (face font-lock-type-face fontified t) 18 22 (fontified t) 22 23 (c-is-sws t c-in-sws t fontified t) 23 24 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 24 25 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 25 34 (c-in-sws t face font-lock-comment-face fontified t) 34 35 (c-in-sws t fontified t) 35 37 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 37 69 (c-in-sws t face font-lock-comment-face fontified t) 69 70 (c-in-sws t fontified t) 70 72 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 72 99 (c-in-sws t face font-lock-comment-face fontified t) 99 100 (c-in-sws t fontified t) 100 102 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 102 132 (c-in-sws t face font-lock-comment-face fontified t) 132 133 (c-in-sws t fontified t) 133 135 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 135 162 (c-in-sws t face font-lock-comment-face fontified t) 162 168 (c-in-sws t fontified t) 168 170 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 170 182 (c-in-sws t face font-lock-comment-face fontified t) 182 187 (c-in-sws t fontified t) 187 188 (c-in-sws t c-is-sws t fontified t) 188 189 (c-is-sws t fontified t) 189 213 (fontified t) 213 214 (c-is-sws t c-in-sws t fontified t) 214 215 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 215 217 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 217 234 (c-in-sws t face font-lock-comment-face fontified t) 234 235 (c-in-sws t c-is-sws t fontified t) 235 236 (c-is-sws t fontified t) 236 261 (fontified t) 261 263 (c-is-sws t c-in-sws t fontified t) 263 264 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 264 266 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 266 305 (c-in-sws t face font-lock-comment-face fontified t) 305 310 (c-in-sws t fontified t) 310 311 (c-in-sws t c-is-sws t fontified t) 311 312 (c-is-sws t fontified t) 312 327 (fontified t) 327 331 (c-is-sws t c-in-sws t fontified t) 331 332 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 332 334 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 334 351 (c-in-sws t face font-lock-comment-face fontified t) 351 356 (c-in-sws t fontified t) 356 357 (c-in-sws t c-is-sws t fontified t) 357 358 (c-is-sws t fontified t) 358 379 (fontified t) 379 380 (c-is-sws t c-in-sws t fontified t) 380 381 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 381 383 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 383 404 (c-in-sws t face font-lock-comment-face fontified t) 404 405 (c-in-sws t c-is-sws t fontified t) 405 406 (c-is-sws t fontified t) 406 427 (fontified t) 427 428 (c-is-sws t c-in-sws t fontified t) 428 429 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 429 431 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 431 449 (c-in-sws t face font-lock-comment-face fontified t) 449 450 (c-is-sws t fontified t) 450 480 (fontified t) 480 481 (c-is-sws t c-in-sws t fontified t) 481 482 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 482 484 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 484 515 (c-in-sws t face font-lock-comment-face fontified t) 515 516 (c-in-sws t c-is-sws t fontified t) 516 517 (c-is-sws t fontified t) 517 541 (fontified t) 541 542 (c-is-sws t c-in-sws t fontified t) 542 543 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 543 545 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 545 582 (c-in-sws t face font-lock-comment-face fontified t) 582 583 (c-in-sws t c-is-sws t fontified t) 583 584 (c-is-sws t fontified t) 584 608 (fontified t) 608 609 (c-is-sws t c-in-sws t fontified t) 609 610 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 610 612 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 612 652 (c-in-sws t face font-lock-comment-face fontified t) 652 653 (c-in-sws t c-is-sws t fontified t) 653 654 (c-is-sws t fontified t) 654 675 (fontified t) 675 676 (c-is-sws t c-in-sws t fontified t) 676 677 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 677 679 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 679 728 (c-in-sws t face font-lock-comment-face fontified t) 728 729 (c-in-sws t c-is-sws t fontified t) 729 730 (c-is-sws t fontified t) 730 752 (fontified t) 752 753 (c-is-sws t c-in-sws t fontified t) 753 754 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 754 756 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 756 793 (c-in-sws t face font-lock-comment-face fontified t) 793 794 (c-in-sws t c-is-sws t fontified t) 794 795 (c-is-sws t fontified t) 795 817 (fontified t) 817 818 (c-is-sws t c-in-sws t fontified t) 818 819 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 819 821 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 821 859 (c-in-sws t face font-lock-comment-face fontified t) 859 860 (c-in-sws t c-is-sws t fontified t) 860 861 (c-is-sws t fontified t) 861 885 (fontified t) 885 887 (c-is-sws t c-in-sws t fontified t) 887 888 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 888 890 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 890 924 (c-in-sws t face font-lock-comment-face fontified t) 924 925 (c-in-sws t c-is-sws t fontified t) 925 926 (c-is-sws t fontified t) 926 949 (fontified t) 949 951 (c-is-sws t c-in-sws t fontified t) 951 952 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 952 954 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 954 980 (c-in-sws t face font-lock-comment-face fontified t) 980 981 (c-is-sws t fontified t) 981 1005 (fontified t) 1005 1007 (c-is-sws t c-in-sws t fontified t) 1007 1008 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1008 1010 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1010 1034 (c-in-sws t face font-lock-comment-face fontified t) 1034 1036 (c-in-sws t fontified t) 1036 1037 (c-in-sws t c-is-sws t fontified t) 1037 1038 (c-is-sws t fontified t) 1038 1054 (fontified t) 1054 1055 (c-is-sws t c-in-sws t fontified t) 1055 1056 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1056 1058 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1058 1074 (c-in-sws t face font-lock-comment-face fontified t) 1074 1077 (c-in-sws t fontified t) 1077 1078 (c-in-sws t c-is-sws t fontified t) 1078 1079 (c-is-sws t fontified t) 1079 1105 (fontified t) 1105 1108 (face font-lock-comment-delimiter-face fontified t) 1108 1138 (face font-lock-comment-face fontified t) 1138 1142 (fontified t)) #("BYTE TXMsgBuf[14] = {0};" 0 1 (fontified t c-is-sws t) 1 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 7 (fontified t) 7 13 (fontified t) 13 24 (fontified t)) "matplotlib.matplotlib_fname()" #("matplotlib.rcParams['backend'] = \"Qt4Agg\"" 0 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t) 20 21 (face font-lock-string-face fontified t syntax-table (15)) 21 28 (face font-lock-string-face fontified t) 28 29 (face font-lock-string-face fontified t syntax-table (15)) 29 33 (fontified t) 33 34 (face font-lock-string-face fontified t syntax-table (15)) 34 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t syntax-table (15))) #("    print \"a\"" 0 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 11 (face font-lock-string-face syntax-table (15) fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face font-lock-string-face syntax-table (15) fontified t)) #("while 1:" 0 5 (face font-lock-keyword-face fontified t) 5 8 (fontified t)) #("(1)" 0 3 (fontified t)) #("from PyQt4 import QtGui ,QtCore
" 0 4 (fontified t face font-lock-keyword-face) 4 11 (fontified t) 11 17 (fontified t face font-lock-keyword-face) 17 30 (fontified t) 30 31 (fontified t rear-nonsticky t) 31 32 (fontified t)) #("import pyqt4
" 0 6 (fontified t face font-lock-keyword-face) 6 12 (fontified t) 12 13 (fontified t)) #("from PyQt4 import QtGui ,QtCore" 0 4 (face font-lock-keyword-face fontified t) 4 11 (fontified t) 11 17 (face font-lock-keyword-face fontified t) 17 31 (fontified t)) "machine/" "matplotlib.rcParams['backend'] = \"Qt4Agg\"
" #("import pylab as pl
import numpy as np

X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
C, S = np.cos(X), np.sin(X)

pl.plot(X, C)
pl.plot(X, S)

pl.show()

" 0 6 (face font-lock-keyword-face fontified t) 6 13 (fontified t) 13 15 (face font-lock-keyword-face fontified t) 15 19 (fontified t) 19 25 (face font-lock-keyword-face fontified t) 25 32 (fontified t) 32 34 (face font-lock-keyword-face fontified t) 34 39 (fontified t) 39 40 (face font-lock-variable-name-face fontified t) 40 84 (fontified t) 84 88 (face font-lock-constant-face fontified t) 88 90 (fontified t) 90 91 (face font-lock-variable-name-face fontified t) 91 93 (fontified t) 93 94 (face font-lock-variable-name-face fontified t) 94 148 (fontified t) 148 156 (fontified t) 156 157 (rear-nonsticky t fontified t) 157 158 (fontified t) 158 159 (fontified t)) "import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('some numbers')
plt.show()" "import pylab as pl
import numpy as np

X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
C, S = np.cos(X), np.sin(X)

pl.plot(X, C)
pl.plot(X, S)

pl.show()" #("# ヒストグラムの描画" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 11 (face font-lock-comment-face fontified t)) #("# 身長の疑似データを生成" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 13 (face font-lock-comment-face fontified t)) "# -*- coding:utf-8 -*-
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import numpy as np

# 身長の疑似データを生成
sample = 1000
mu, sigma = 170, 5
data = np.random.normal(mu, sigma, sample)

# ヒストグラムの描画
n, bins, patches = plt.hist(data, normed=1, alpha=0.75, align='mid')
y = mlab.normpdf(bins, mu, sigma)
l = plt.plot(bins, y, 'r-', linewidth=1)

plt.title(r'$\\mathrm{Histgram\\ of\\ Height:}\\ \\mu=%d,\\ \\sigma=%d$' % (mu, sigma))
plt.xlabel('Height')
plt.ylabel('Probability')
plt.grid(True)

plt.show()" ">>> import matplo" "np.median(b)" "b = np.random.randint(1, 100, 100)" "import numpy as np" #(" ;; 左右のライン
 '(fringe ((t (:background \"#ffffdf\"))))
" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 11 (face font-lock-comment-face fontified t) 11 26 (fontified t) 26 37 (face font-lock-builtin-face fontified t) 37 38 (fontified t) 38 47 (face font-lock-string-face fontified t) 47 52 (fontified t)) #("1B1D1E" 0 6 (face font-lock-string-face fontified t)) #("(deftheme reki" 0 1 (fontified t) 1 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t)) #("(set-frame-font \"ricty-12\")" 0 16 (fontified t) 16 26 (face font-lock-string-face fontified t) 26 27 (fontified t rear-nonsticky t)) #("(global-set-key (kbd \"C-c 2\") (lambda()(interactive)(conf_theme 'patchouli ntheme)(setq ntheme 'patchouli)))" 0 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 31 (fontified t) 31 37 (face font-lock-keyword-face fontified t) 37 108 (fontified t)) #("(provide-theme 'hack)" 0 21 (fontified t)) #("(global-set-key (kbd \"C-c 1\") (lambda()(interactive)(conf_theme 'molokai ntheme)(setq ntheme 'molokai)))" 0 21 (fontified t) 21 28 (face font-lock-string-face fontified t) 28 31 (fontified t) 31 37 (face font-lock-keyword-face fontified t) 37 104 (fontified t)) #("(deftheme molokai
  \"Molokai color theme\")

(custom-theme-set-faces
 'molokai
 ;; 背景・文字・カーソル
 '(cursor ((t (:foreground \"#F8F8F0\"))))
 '(default ((t (:background \"#1B1D1E\" :foreground \"#F8F8F2\"))))

 ;; 選択範囲
 '(region ((t (:background \"#403D3D\"))))

 ;; モードライン
 '(mode-line ((t (:foreground \"#F8F8F2\" :background \"#000000\"
                  :box (:line-width 1 :color \"#000000\" :style released-button)))))
 '(mode-line-buffer-id ((t (:foreground nil :background nil))))
 '(mode-line-inactive ((t (:foreground \"#BCBCBC\" :background \"#333333\"
                           :box (:line-width 1 :color \"#333333\")))))

 ;; ハイライト
 '(highlight ((t (:foreground \"#000000\" :background \"#C4BE89\"))))
 '(hl-line ((t (:background \"#293739\"))))

 ;; 関数名
 '(font-lock-function-name-face ((t (:foreground \"#FFFFFF\"))))

 ;; 変数名・変数の内容
 '(font-lock-variable-name-face ((t (:foreground \"#FFFFFF\"))))
 '(font-lock-string-face ((t (:foreground \"#E6DB74\"))))

 ;; 特定キーワード
 '(font-lock-keyword-face ((t (:foreground \"#F92672\"))))

 ;; Boolean
 '(font-lock-constant-face((t (:foreground \"#AE81BC\"))))

 ;; 括弧
 '(show-paren-match-face ((t (:foreground \"#1B1D1E\" :background \"#FD971F\"))))
 '(paren-face ((t (:foreground \"#A6E22A\" :background nil))))

 ;; コメント
 '(font-lock-comment-face ((t (:foreground \"#74715D\"))))

 ;;行番号
 '(linum ((t (:foreground \"#404040\"))))


 ;; CSS
 '(css-selector ((t (:foreground \"#66D9EF\"))))
 '(css-property ((t (:foreground \"#FD971F\"))))

 ;; nXML-mode
 ;; タグ名
 '(nxml-element-local-name ((t (:foreground \"#F92672\"))))
 ;; 属性
 '(nxml-attribute-local-name ((t (:foreground \"#66D9EF\"))))
 ;; 括弧
 '(nxml-tag-delimiter ((t (:foreground \"#A6E22A\"))))
 ;; DOCTYPE宣言
 '(nxml-markup-declaration-delimiter ((t (:foreground \"#74715D\"))))

 ;; dired
 '(dired-directory ((t (:foreground \"#A6E22A\"))))
 '(dired-symlink ((t (:foreground \"#66D9EF\"))))

 ;; MMM-mode
 '(mmm-default-submode-face ((t (:foreground nil :background \"#000000\")))))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'molokai)
" 0 1 (fontified t) 1 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 17 (face font-lock-type-face fontified t) 17 20 (fontified t) 20 41 (face font-lock-doc-face fontified t) 41 79 (fontified t) 79 82 (face font-lock-comment-delimiter-face fontified t) 82 93 (face font-lock-comment-face fontified t) 93 108 (fontified t) 108 119 (face font-lock-builtin-face fontified t) 119 120 (fontified t) 120 129 (face font-lock-string-face fontified t) 129 150 (fontified t) 150 161 (face font-lock-builtin-face fontified t) 161 162 (fontified t) 162 171 (face font-lock-string-face fontified t) 171 172 (fontified t) 172 183 (face font-lock-builtin-face fontified t) 183 184 (fontified t) 184 193 (face font-lock-string-face fontified t) 193 200 (fontified t) 200 203 (face font-lock-comment-delimiter-face fontified t) 203 208 (face font-lock-comment-face fontified t) 208 223 (fontified t) 223 234 (face font-lock-builtin-face fontified t) 234 235 (fontified t) 235 244 (face font-lock-string-face fontified t) 244 251 (fontified t) 251 254 (face font-lock-comment-delimiter-face fontified t) 254 261 (face font-lock-comment-face fontified t) 261 279 (fontified t) 279 290 (face font-lock-builtin-face fontified t) 290 291 (fontified t) 291 300 (face font-lock-string-face fontified t) 300 301 (fontified t) 301 312 (face font-lock-builtin-face fontified t) 312 313 (fontified t) 313 322 (face font-lock-string-face fontified t) 322 341 (fontified t) 341 345 (face font-lock-builtin-face fontified t) 345 347 (fontified t) 347 358 (face font-lock-builtin-face fontified t) 358 361 (fontified t) 361 367 (face font-lock-builtin-face fontified t) 367 368 (fontified t) 368 377 (face font-lock-string-face fontified t) 377 378 (fontified t) 378 384 (face font-lock-builtin-face fontified t) 384 434 (fontified t) 434 445 (face font-lock-builtin-face fontified t) 445 450 (fontified t) 450 461 (face font-lock-builtin-face fontified t) 461 497 (fontified t) 497 508 (face font-lock-builtin-face fontified t) 508 509 (fontified t) 509 518 (face font-lock-string-face fontified t) 518 519 (fontified t) 519 530 (face font-lock-builtin-face fontified t) 530 531 (fontified t) 531 540 (face font-lock-string-face fontified t) 540 541 (fontified t) 541 568 (fontified t) 568 572 (face font-lock-builtin-face fontified t) 572 574 (fontified t) 574 585 (face font-lock-builtin-face fontified t) 585 588 (fontified t) 588 594 (face font-lock-builtin-face fontified t) 594 595 (fontified t) 595 604 (face font-lock-string-face fontified t) 604 612 (fontified t) 612 615 (face font-lock-comment-delimiter-face fontified t) 615 621 (face font-lock-comment-face fontified t) 621 639 (fontified t) 639 650 (face font-lock-builtin-face fontified t) 650 651 (fontified t) 651 660 (face font-lock-string-face fontified t) 660 661 (fontified t) 661 672 (face font-lock-builtin-face fontified t) 672 673 (fontified t) 673 682 (face font-lock-string-face fontified t) 682 703 (fontified t) 703 714 (face font-lock-builtin-face fontified t) 714 715 (fontified t) 715 724 (face font-lock-string-face fontified t) 724 731 (fontified t) 731 734 (face font-lock-comment-delimiter-face fontified t) 734 738 (face font-lock-comment-face fontified t) 738 775 (fontified t) 775 786 (face font-lock-builtin-face fontified t) 786 787 (fontified t) 787 796 (face font-lock-string-face fontified t) 796 803 (fontified t) 803 806 (face font-lock-comment-delimiter-face fontified t) 806 816 (face font-lock-comment-face fontified t) 816 853 (fontified t) 853 864 (face font-lock-builtin-face fontified t) 864 865 (fontified t) 865 874 (face font-lock-string-face fontified t) 874 909 (fontified t) 909 920 (face font-lock-builtin-face fontified t) 920 921 (fontified t) 921 930 (face font-lock-string-face fontified t) 930 937 (fontified t) 937 940 (face font-lock-comment-delimiter-face fontified t) 940 948 (face font-lock-comment-face fontified t) 948 979 (fontified t) 979 990 (face font-lock-builtin-face fontified t) 990 991 (fontified t) 991 1000 (face font-lock-string-face fontified t) 1000 1007 (fontified t) 1007 1010 (face font-lock-comment-delimiter-face fontified t) 1010 1018 (face font-lock-comment-face fontified t) 1018 1049 (fontified t) 1049 1060 (face font-lock-builtin-face fontified t) 1060 1061 (fontified t) 1061 1070 (face font-lock-string-face fontified t) 1070 1075 (fontified t) 1075 1077 (fontified t) 1077 1080 (face font-lock-comment-delimiter-face fontified t) 1080 1083 (face font-lock-comment-face fontified t) 1083 1113 (fontified t) 1113 1124 (face font-lock-builtin-face fontified t) 1124 1125 (fontified t) 1125 1134 (face font-lock-string-face fontified t) 1134 1135 (fontified t) 1135 1146 (face font-lock-builtin-face fontified t) 1146 1147 (fontified t) 1147 1156 (face font-lock-string-face fontified t) 1156 1180 (fontified t) 1180 1191 (face font-lock-builtin-face fontified t) 1191 1192 (fontified t) 1192 1201 (face font-lock-string-face fontified t) 1201 1202 (fontified t) 1202 1213 (face font-lock-builtin-face fontified t) 1213 1224 (fontified t) 1224 1227 (face font-lock-comment-delimiter-face fontified t) 1227 1232 (face font-lock-comment-face fontified t) 1232 1263 (fontified t) 1263 1274 (face font-lock-builtin-face fontified t) 1274 1275 (fontified t) 1275 1284 (face font-lock-string-face fontified t) 1284 1291 (fontified t) 1291 1293 (face font-lock-comment-delimiter-face fontified t) 1293 1297 (face font-lock-comment-face fontified t) 1297 1311 (fontified t) 1311 1322 (face font-lock-builtin-face fontified t) 1322 1323 (fontified t) 1323 1332 (face font-lock-string-face fontified t) 1332 1340 (fontified t) 1340 1343 (face font-lock-comment-delimiter-face fontified t) 1343 1347 (face font-lock-comment-face fontified t) 1347 1368 (fontified t) 1368 1379 (face font-lock-builtin-face fontified t) 1379 1380 (fontified t) 1380 1389 (face font-lock-string-face fontified t) 1389 1415 (fontified t) 1415 1426 (face font-lock-builtin-face fontified t) 1426 1427 (fontified t) 1427 1436 (face font-lock-string-face fontified t) 1436 1443 (fontified t) 1443 1446 (face font-lock-comment-delimiter-face fontified t) 1446 1456 (face font-lock-comment-face fontified t) 1456 1457 (fontified t) 1457 1460 (face font-lock-comment-delimiter-face fontified t) 1460 1464 (face font-lock-comment-face fontified t) 1464 1496 (fontified t) 1496 1507 (face font-lock-builtin-face fontified t) 1507 1508 (fontified t) 1508 1517 (face font-lock-string-face fontified t) 1517 1523 (fontified t) 1523 1526 (face font-lock-comment-delimiter-face fontified t) 1526 1529 (face font-lock-comment-face fontified t) 1529 1563 (fontified t) 1563 1574 (face font-lock-builtin-face fontified t) 1574 1575 (fontified t) 1575 1584 (face font-lock-string-face fontified t) 1584 1589 (fontified t) 1589 2111 (fontified nil)) "" #("time.sleep" 0 10 (fontified t)) #("def main()" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-function-name-face fontified t) 8 10 (fontified t)) #("monitor = ''" 0 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t)) #("export WINEPREFIX=$HOME/wine32" 0 6 (face font-lock-builtin-face fontified t) 6 7 (fontified t) 7 17 (face font-lock-variable-name-face fontified t) 17 19 (fontified t) 19 23 (face font-lock-variable-name-face fontified t) 23 30 (fontified t)) "	cap.set(CV_CAP_PROP_FRAME_WIDTH, 320);
	cap.set(CV_CAP_PROP_FRAME_HEIGHT, 240);
" #("	

" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 3 (rear-nonsticky t fontified t)) #("
" 0 1 (fontified t)) #("	cap >> video;" 0 1 (fontified t) 1 2 (fontified t) 2 13 (fontified t) 13 14 (fontified t rear-nonsticky t))))
(setq-default session-file-alist '(("~/projects/dotfiles/.emacs.d/session.10e01e848cd28a1fd6140331077638101300000013530038" 1 nil 1 nil nil 1 (overwrite-mode)) ("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/Node1.c" 641 nil 1 nil nil 933 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/.framesize.el" 262 nil 1 nil nil 262 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/.scratch" 2589 nil 1 nil nil 2589 (overwrite-mode)) ("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/Node1.c" 934 nil 1 nil nil 934 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 271 300 1 nil nil 272 (overwrite-mode)) ("~/Desktop/main.c" 84 84 1 nil nil 51 (overwrite-mode)) ("~/Desktop/A.c" 30 30 1 nil nil 30 (overwrite-mode)) ("~/Desktop/A.h" 12 98 1 nil nil 286 (overwrite-mode)) ("~/Desktop/A.c" 29 nil 1 nil nil 30 (overwrite-mode)) ("~/Desktop/main.c" 81 nil 1 nil nil 81 (overwrite-mode)) ("~/Desktop/A.h" 265 96 1 nil nil 28 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 272 301 1 nil nil 272 (overwrite-mode)) ("~/Desktop/A.h" 139 90 1 nil nil 93 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 272 300 1 nil nil 272 (overwrite-mode)) ("~/Desktop/A.h" 90 90 1 nil nil 268 (overwrite-mode)) ("~/Desktop/A.h" 90 90 1 nil nil 236 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 2 14662 1 nil nil 2 (overwrite-mode)) ("~/Desktop/A.h" 240 89 1 nil nil 236 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/.framesize.el" 261 nil 1 nil nil 261 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 8764 1667 1 nil nil 8764 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 15154 4046 1 nil nil 15152 (overwrite-mode)) ("~/Desktop/A.h" 251 90 1 nil nil nil (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 487 512 1 nil nil 487 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 487 3777 1 nil nil 487 (overwrite-mode)) ("~/Desktop/A.h" 248 89 1 nil nil nil (overwrite-mode)) ("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/SPI.h" 236 52 1 nil nil 237 (overwrite-mode)) ("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/CAN2.c" 2900 1 1 nil nil 816 (overwrite-mode)) ("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/SPI.c" 65 65 1 nil nil 65 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 1945 3994 1 nil nil 3994 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 3994 3968 1 nil nil 3994 (overwrite-mode)) ("~/p/machine/test.py" 143 51 1 nil nil 80 (overwrite-mode)) ("~/.matplotlib/matplotlibrc" 19 19 1 nil nil 15 (overwrite-mode)) ("~/p/dpy/q18.py" 86 55 1 nil nil 86 (overwrite-mode)) ("~/p/machine/histgram.py" 186 nil 1 nil nil 186 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 8828 4829 1 nil nil 4954 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/reki-theme.el" 1279 270 1 nil nil 184 (overwrite-mode)) ("~/p/dcv/sub.cpp" 1022 537 1 nil nil 503 (overwrite-mode)) ("~/.matplotlib/matplotlibrc" 14 nil 1 nil nil 14 (overwrite-mode)) ("~/p/machine/test.py" 140 51 1 nil nil 80 (overwrite-mode)) ("~/.matplotlib/matplotlibrc" 19 nil 1 nil nil 20 (overwrite-mode)) ("~/p/machine/test.py" 1 1 1 nil nil 92 (overwrite-mode)) ("~/p/machine/test.py" 509 1 1 nil nil 510 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/reki-theme.el" 1330 863 1 nil nil 1330 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/reki-theme.el" 1316 156 1 nil nil 180 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/reki-theme.el" 159 156 1 nil nil 159 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/hack-theme.el" 2132 1 1 nil nil 2130 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 4829 13188 1 nil nil 4822 (overwrite-mode)) ("~/p/dpy/joy.py" 503 163 1 nil nil 503 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/jpaper-theme.el" 2416 2389 1 nil nil 2417 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/molokai-theme.el" 2139 2112 1 nil nil 2140 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/reki-theme.el" 15 2144 1 nil nil 2171 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/hack-theme.el" 2130 2103 1 nil nil 2130 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 9518 845 1 nil nil 872 (overwrite-mode)) ("~/p/dpy/joy.py" 48 163 1 nil nil 436 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 4659 4632 1 nil nil 4659 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/themes/hack-theme.el" 1866 1 1 nil nil 2094 (overwrite-mode)) ("~/p/dpy/joy.py" 436 163 1 nil nil 436 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 1494 11041 1 nil nil 11041 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 11994 11041 1 nil nil 11041 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 11063 634 1 nil nil 8675 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 8675 634 1 nil nil 8675 (overwrite-mode)) ("~/projects/dotfiles/.zshrc" 891 380 1 nil nil 891 (overwrite-mode)) ("~/projects/dotfiles/.zshrc" 843 777 1 nil nil 865 (overwrite-mode)) ("~/p/dcv/contour.cpp" 1073 798 1 nil nil 310 (overwrite-mode)) ("~/p/dcv/syasin.cpp" 409 327 1 nil nil 409 (overwrite-mode)) ("~/p/dcv/sub.cpp" 922 537 1 nil nil nil (overwrite-mode)) ("~/p/dcv/split.cpp" 200 1 1 nil nil 200 (overwrite-mode)) ("~/projects/dotfiles/.zshrc" 375 138 1 nil nil 138 (overwrite-mode)) ("~/p/dpy/joy.py" 425 150 1 nil nil 423 (overwrite-mode)) ("~/p/dcv/contour.cpp" 857 796 1 nil nil 857 (overwrite-mode)) ("~/p/dcv/split.cpp" 734 631 1 nil nil 200 (overwrite-mode)) ("~/p/dopencv/sub.cpp" 279 1076 1 nil nil 618 (overwrite-mode)) ("~/p/dopencv/test3.cpp" 1115 638 1 nil nil 679 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 477 1471 1 nil nil 1602 (overwrite-mode)) ("~/p/dopencv/sub.cpp" 1347 1076 1 nil nil 618 (overwrite-mode)) ("~/p/dopencv/sub.cpp" 1318 1075 1 nil nil 1077 (overwrite-mode)) ("~/p/dopencv/sub.cpp" 524 524 1 nil nil 524 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 634 487 1 nil nil 494 (overwrite-mode)) ("~/p/dopencv/test3.cpp" 930 887 1 nil nil 875 (overwrite-mode)) ("~/p/dopencv/histogram.cpp" 1256 1276 1 nil nil 1274 (overwrite-mode)) ("~/p/dopencv/test3.cpp" 270 679 1 nil nil 270 (overwrite-mode)) ("~/p/dopencv/test3.cpp" 581 679 1 nil nil 1085 (overwrite-mode)) ("~/p/dopencv/test3.cpp" 757 679 1 nil nil 1085 (overwrite-mode)) ("~/p/dopencv/test2.cpp" 636 1 1 nil nil 1613 (overwrite-mode)) ("~/p/dopencv/sub.cpp" 1474 1316 1 nil nil 1356 (overwrite-mode)) ("~/p/dopencv/sub.cpp" 1262 1181 1 nil nil 938 (overwrite-mode)) ("~/projects/dotfiles/.zshrc" 138 138 1 nil nil 138 (overwrite-mode)) ("~/projects/dotfiles/.zsh.d/zshrc.sh" 340 340 1 nil nil 340 (overwrite-mode)) ("~/.gconf/apps/gnome-terminal/profiles/Default/%gconf.xml" 1750 137 1 nil nil 1750 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 1578 290 1 nil nil 847 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 823 852 1 nil nil 823 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 851 851 1 nil nil 851 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 5425 5327 1 nil nil 5373 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 869 5422 1 nil nil 854 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 10902 5331 1 nil nil 5390 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 5348 5304 1 nil nil 5329 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 14869 5323 1 nil nil 14867 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 5321 5240 1 nil nil 5286 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 1396 6810 1 nil nil 753 (overwrite-mode)) ("~/projects/dotfiles/.emacs.d/init.el" 5253 5211 1 nil nil 5212 (overwrite-mode)) ("~/p/dopencv/sub.cpp" 272 775 1 nil nil 762 (overwrite-mode)) ("~/p/dopencv/split.cpp" 1717 243 1 nil nil 1970 (overwrite-mode)) ("~/p/dopencv/histogram.cpp" 1 2303 1 nil nil 619 (overwrite-mode)) ("~/p/dopencv/split.cpp" 1 2303 1 nil nil 1970 (overwrite-mode)) ("~/p/dopencv/threshold.cpp" 531 1778 1 nil nil 531 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 1518 1471 1 nil nil 1518 (overwrite-mode)) ("~/p/dopencv/test.cpp" 708 14 1 nil nil 940 (overwrite-mode)) ("~/p/dopencv/Makefile" 466 271 1 nil nil 293 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 733 1476 1 nil nil 1273 (overwrite-mode)) ("~/p/dopencv/test.cpp" 1645 14 1 nil nil 940 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 1731 1474 1 nil nil 1587 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 1182 1263 1 nil nil 1264 (overwrite-mode)) ("~/p/dopencv/test.cpp" 289 363 1 nil nil 292 (overwrite-mode)) ("~/p/dopencv/test.cpp" 463 1 1 nil nil 464 (overwrite-mode)) ("~/texd/program_2.tex" 511 624 1 nil nil 644 (overwrite-mode)) ("~/texd/temp.tex" 199 179 1 nil nil 199 (overwrite-mode)) ("~/texd/program_2.tex" 345 345 1 nil nil 345 (overwrite-mode)) ("/media/rasorasi/USBMEMORY/kadai23.c" 104 99 1 nil nil 104 (overwrite-mode)) ("/media/rasorasi/USBMEMORY/kagi.py" 1464 1595 1 nil nil 1924 (overwrite-mode)) ("~/Desktop/kadai23.c" 247 247 1 nil nil 105 (overwrite-mode)) ("/media/rasorasi/USBMEMORY/kadai23.c" 242 nil 1 nil nil 243 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 1422 468 1 nil nil 1177 (overwrite-mode)) ("~/opencv.sh" 2124 1 1 nil nil 2124 (overwrite-mode)) ("~/p/dopencv/Makefile" 270 297 1 nil nil 212 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 723 468 1 nil nil 1177 (overwrite-mode)) ("~/p/dopencv/Makefile" 210 nil 1 nil nil 250 (overwrite-mode)) ("~/p/dopencv/flip.cpp" 733 1 1 nil nil 733 (overwrite-mode))))
(setq-default file-name-history '("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/CAN2.h" "/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/Node1.c" "/home/rasorasi/wgetd/matplotlib/setup.py" "/home/rasorasi/.matplotlib/matplotlibrc" "~/p/machine/histgram.py" "/home/rasorasi/p/machine/test.py" "~/projects/dotfiles/.emacs.d/themes/jpaper-theme.el" "~/projects/dotfiles/.emacs.d/themes/hack-theme.el" "~/projects/dotfiles/.emacs.d/themes/reki-theme.el" "~/projects/dotfiles/.emacs.d/themes/patchouli-theme.el" "~/projects/dotfiles/.emacs.d/themes/molokai-theme.el" "~/projects/dotfiles/.zshrc" "~/p/dcv/sub.cpp" "~/p/dcv/cap.cpp" "~/p/dcv/split.cpp" "~/.zshrc" "~/p/dopencv/flip.cpp" "~/p/dopencv/sub.cpp" "~/p/dopencv/histogram.cpp" "~/projects/dotfiles/.zsh.d/zshrc.sh" "/home/rasorasi/.zshrc" "/home/rasorasi/Ricty-3.2.3/README.md" "/home/rasorasi/p/dopencv/Makefile" "~/p/dopencv/test.cpp" "~/texd/temp.tex" "/home/rasorasi/texd/program_2.tex" "/home/rasorasi/texd/program_2." "/home/rasorasi/Desktop/kadai23.c" "~/p/dopencv/Makefile" "/home/rasorasi/p/dopencv/flip.cpp"))
(setq-default anything-c-source-complete-shell-history '((name . "Shell History") (init lambda nil (require (quote shell-history)) (with-current-buffer (anything-candidate-buffer (shell-history-buffer)) (revert-buffer t t) (set (make-local-variable (quote zsh-p)) (shell-history-zsh-extended-history-p)))) (get-line . acsh-get-line) (search-from-end) (type . complete)))
(setq-default anything-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default anything-c-source-eshell-history '((name . "Eshell history") (init lambda nil (let (eshell-hist-ignoredups) (eshell-write-history eshell-history-file-name t) (with-current-buffer (anything-candidate-buffer (quote global)) (insert-file-contents eshell-history-file-name))) (remove-hook (quote minibuffer-setup-hook) (quote eshell-mode))) (candidates-in-buffer) (keymap keymap (27 keymap (112 . anything-next-line)) keymap (23 . anything-yank-text-at-point) (24 keymap (6 . anything-quit-and-find-file)) (help keymap (109 . anything-help)) (67108927 keymap (109 . anything-help)) (8 keymap (109 . anything-help)) (f1 keymap (109 . anything-help)) (3 keymap (24 keymap (2 . anything-send-bug-report-from-anything) (13 . anything-display-all-visible-marks) (4 . anything-debug-output)) (21 . anything-force-update) (6 . anything-follow-mode) (11 . anything-kill-selection-and-quit) (25 . anything-yank-selection) (4 . anything-delete-current-selection)) (67108987 . anything-enlarge-window) (67108989 . anything-narrow-window) (20 . anything-toggle-resplit-window) (18 . undefined) (11 . anything-delete-minibuffer-contents) (67108896 . anything-toggle-visible-mark) (C-M-up . anything-scroll-other-window-down) (C-M-down . anything-scroll-other-window) (M-prior . anything-scroll-other-window-down) (M-next . anything-scroll-other-window) (15 . anything-next-source) (5 . anything-select-2nd-action-or-end-of-line) (26 . anything-execute-persistent-action) (90 . anything-select-with-digit-shortcut) (89 . anything-select-with-digit-shortcut) (88 . anything-select-with-digit-shortcut) (87 . anything-select-with-digit-shortcut) (86 . anything-select-with-digit-shortcut) (85 . anything-select-with-digit-shortcut) (84 . anything-select-with-digit-shortcut) (83 . anything-select-with-digit-shortcut) (82 . anything-select-with-digit-shortcut) (81 . anything-select-with-digit-shortcut) (80 . anything-select-with-digit-shortcut) (79 . anything-select-with-digit-shortcut) (78 . anything-select-with-digit-shortcut) (77 . anything-select-with-digit-shortcut) (76 . anything-select-with-digit-shortcut) (75 . anything-select-with-digit-shortcut) (74 . anything-select-with-digit-shortcut) (73 . anything-select-with-digit-shortcut) (72 . anything-select-with-digit-shortcut) (71 . anything-select-with-digit-shortcut) (70 . anything-select-with-digit-shortcut) (69 . anything-select-with-digit-shortcut) (68 . anything-select-with-digit-shortcut) (67 . anything-select-with-digit-shortcut) (66 . anything-select-with-digit-shortcut) (65 . anything-select-with-digit-shortcut) (67108921 . anything-select-with-digit-shortcut) (67108920 . anything-select-with-digit-shortcut) (67108919 . anything-select-with-digit-shortcut) (67108918 . anything-select-with-digit-shortcut) (67108917 . anything-select-with-digit-shortcut) (67108916 . anything-select-with-digit-shortcut) (67108915 . anything-select-with-digit-shortcut) (67108914 . anything-select-with-digit-shortcut) (67108913 . anything-select-with-digit-shortcut) (left . anything-previous-source) (right . anything-next-source) (22 . anything-next-page) (16 . anything-previous-line) (14 . anything-next-line) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . anything-help))) (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . anything-select-3rd-action) (13 . anything-exit-minibuffer) (7 . anything-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . anything-select-action) (XF86Back . previous-history-element) (up . anything-previous-line) (prior . anything-previous-page) (XF86Forward . next-history-element) (down . anything-next-line) (next . anything-next-page) (27 keymap (109 . anything-toggle-all-marks) (93 . anything-next-visible-mark) (91 . anything-prev-visible-mark) (32 . anything-toggle-visible-mark) (33554454 . anything-scroll-other-window-down) (25 . anything-scroll-other-window-down) (22 . anything-scroll-other-window) (62 . anything-end-of-buffer) (60 . anything-beginning-of-buffer) (118 . anything-previous-page) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (filtered-candidate-transformer lambda (candidates sources) (reverse candidates)) (candidate-number-limit . 9999) (action lambda (candidate) (eshell-kill-input) (insert candidate))))
(setq-default anything-c-source-extended-command-history '((name . "Emacs Commands History") (candidates lambda nil (anything-fast-remove-dups extended-command-history :test (quote equal))) (type . command)))
(setq-default anything-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (match anything-c-match-on-basename) (type . file)))
(setq-default anything-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . anything-c-source-global-mark-ring-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (anything-c-switch-to-buffer (second items)) (anything-goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (anything-c-switch-to-buffer (second items)) (anything-goto-line (string-to-number (car items))) (anything-match-line-color-current-line))) (persistent-help . "Show this line")))
(setq-default anything-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (anything-attrset (quote last-command) last-command)) (candidates . anything-c-kill-ring-candidates) (filtered-candidate-transformer anything-c-kill-ring-transformer) (action . anything-c-kill-ring-action) (keymap keymap (27 keymap (117 . anything-previous-line) (121 . anything-next-line)) keymap (23 . anything-yank-text-at-point) (24 keymap (6 . anything-quit-and-find-file)) (help keymap (109 . anything-help)) (67108927 keymap (109 . anything-help)) (8 keymap (109 . anything-help)) (f1 keymap (109 . anything-help)) (3 keymap (24 keymap (2 . anything-send-bug-report-from-anything) (13 . anything-display-all-visible-marks) (4 . anything-debug-output)) (21 . anything-force-update) (6 . anything-follow-mode) (11 . anything-kill-selection-and-quit) (25 . anything-yank-selection) (4 . anything-delete-current-selection)) (67108987 . anything-enlarge-window) (67108989 . anything-narrow-window) (20 . anything-toggle-resplit-window) (18 . undefined) (11 . anything-delete-minibuffer-contents) (67108896 . anything-toggle-visible-mark) (C-M-up . anything-scroll-other-window-down) (C-M-down . anything-scroll-other-window) (M-prior . anything-scroll-other-window-down) (M-next . anything-scroll-other-window) (15 . anything-next-source) (5 . anything-select-2nd-action-or-end-of-line) (26 . anything-execute-persistent-action) (90 . anything-select-with-digit-shortcut) (89 . anything-select-with-digit-shortcut) (88 . anything-select-with-digit-shortcut) (87 . anything-select-with-digit-shortcut) (86 . anything-select-with-digit-shortcut) (85 . anything-select-with-digit-shortcut) (84 . anything-select-with-digit-shortcut) (83 . anything-select-with-digit-shortcut) (82 . anything-select-with-digit-shortcut) (81 . anything-select-with-digit-shortcut) (80 . anything-select-with-digit-shortcut) (79 . anything-select-with-digit-shortcut) (78 . anything-select-with-digit-shortcut) (77 . anything-select-with-digit-shortcut) (76 . anything-select-with-digit-shortcut) (75 . anything-select-with-digit-shortcut) (74 . anything-select-with-digit-shortcut) (73 . anything-select-with-digit-shortcut) (72 . anything-select-with-digit-shortcut) (71 . anything-select-with-digit-shortcut) (70 . anything-select-with-digit-shortcut) (69 . anything-select-with-digit-shortcut) (68 . anything-select-with-digit-shortcut) (67 . anything-select-with-digit-shortcut) (66 . anything-select-with-digit-shortcut) (65 . anything-select-with-digit-shortcut) (67108921 . anything-select-with-digit-shortcut) (67108920 . anything-select-with-digit-shortcut) (67108919 . anything-select-with-digit-shortcut) (67108918 . anything-select-with-digit-shortcut) (67108917 . anything-select-with-digit-shortcut) (67108916 . anything-select-with-digit-shortcut) (67108915 . anything-select-with-digit-shortcut) (67108914 . anything-select-with-digit-shortcut) (67108913 . anything-select-with-digit-shortcut) (left . anything-previous-source) (right . anything-next-source) (22 . anything-next-page) (16 . anything-previous-line) (14 . anything-next-line) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . anything-help))) (minibuf "Minibuf" keymap (previous menu-item "Previous History Item" previous-history-element :help "Put previous minibuffer history element in the minibuffer") (next menu-item "Next History Item" next-history-element :help "Put next minibuffer history element in the minibuffer") (isearch-backward menu-item "Isearch History Backward" isearch-backward :help "Incrementally search minibuffer history backward") (isearch-forward menu-item "Isearch History Forward" isearch-forward :help "Incrementally search minibuffer history forward") (return menu-item "Enter" exit-minibuffer :key-sequence "" :help "Terminate input and exit minibuffer") (quit menu-item "Quit" abort-recursive-edit :help "Abort input and exit minibuffer") "Minibuf")) (10 . anything-select-3rd-action) (13 . anything-exit-minibuffer) (7 . anything-keyboard-quit) (C-tab . file-cache-minibuffer-complete) (9 . anything-select-action) (XF86Back . previous-history-element) (up . anything-previous-line) (prior . anything-previous-page) (XF86Forward . next-history-element) (down . anything-next-line) (next . anything-next-page) (27 keymap (109 . anything-toggle-all-marks) (93 . anything-next-visible-mark) (91 . anything-prev-visible-mark) (32 . anything-toggle-visible-mark) (33554454 . anything-scroll-other-window-down) (25 . anything-scroll-other-window-down) (22 . anything-scroll-other-window) (62 . anything-end-of-buffer) (60 . anything-beginning-of-buffer) (118 . anything-previous-page) (114 . previous-matching-history-element) (115 . next-matching-history-element) (112 . previous-history-element) (110 . next-history-element))) (last-command . kill-region) (migemo) (multiline)))
(setq-default anything-c-source-mark-ring '((name . "mark-ring") (init lambda nil (setq anything-mark-ring-cache (ignore-errors (anything-c-source-mark-ring-candidates)))) (candidates lambda nil (anything-aif anything-mark-ring-cache it)) (action ("Goto line" lambda (candidate) (anything-goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (anything-goto-line (string-to-number candidate)) (anything-match-line-color-current-line)) (persistent-help . "Show this line")))
(setq-default anything-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default buffer-name-history '("test.py" "machine" "*shell*" "reki-theme.el" "histgram.cpp" "program_2."))
(setq-default command-history '((exit nil) (execute-extended-command nil "exit") (find-file "/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/CAN2.h" t) (find-file "/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/Node1.c" t) (find-file "/home/rasorasi/Desktop/main.c" t) (find-file "/home/rasorasi/Desktop/A.c" t) (cua-sequence-rectangle 1 1 "") (cua-fill-char-rectangle 97) (cua-incr-rectangle 1) (execute-extended-command nil "cua-incr-rectangle") (cua-string-rectangle "1") (execute-extended-command nil "cua-string-rectangle") (string-rectangle (region-beginning) (region-end) "1") (execute-extended-command nil "string-rectangle") (describe-key "\351" 1 nil) (goto-line 1 nil) (goto-line 10 nil) (find-file "/home/rasorasi/Desktop/A.h" t) (find-file "/home/rasorasi/Desktop" t) (find-file "/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/SPI.c" t) (find-file "/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/SPI.h" t) (find-file "/media/rasorasi/USBMEMORY/CAN_kato" t) (find-file "/home/rasorasi/p" t) (find-file "/home/rasorasi/p/machine/test.py" t) (find-file "/home/rasorasi/p/machine/histgram.py" t) (kill-buffer "test.py") (kill-buffer "machine")))
(setq-default extended-command-history '("exit" "cua-incr-rectangle" "cua-string-rectangle" "string-rectangle" "shell" "eshell" "search-buffers-scroll-up" "indent-region" "set-default-font"))
(setq-default global-mark-ring 'nil)
(setq-default helm-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default helm-ff-history '("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/" "/home/rasorasi/Desktop/" "/home/rasorasi/projects/dotfiles/.emacs.d/" "/media/rasorasi/USBMEMORY/" "/home/rasorasi/p/" "/home/rasorasi/p/machine/" "/home/rasorasi/projects/dotfiles/.emacs.d/themes/" "/home/rasorasi/projects/dotfiles/" "/home/rasorasi/p/dcv/" "/home/rasorasi/" "/home/rasorasi/p/dpy/" "/" "/home/rasorasi/p/dopencv/" "/home/rasorasi/projects/dotfiles/.zsh.d/" "/home/rasorasi/texd/"))
(setq-default helm-source--ff-file-name-history '((name . "File name history") (init lambda nil (with-helm-alive-p (when helm-ff-file-name-history-use-recentf (require (quote recentf)) (or recentf-mode (recentf-mode 1))))) (candidates lambda nil (if helm-ff-file-name-history-use-recentf recentf-list file-name-history)) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" lambda (candidate) (helm-set-pattern (expand-file-name candidate)) (with-helm-after-update-hook (helm-exit-minibuffer))) ("Find file in helm" lambda (candidate) (helm-set-pattern (expand-file-name candidate))))))
(setq-default helm-source-comint-input-ring '((name . "Comint history") (candidates lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) (action . helm-comint-input-ring-action)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (persistent-action . ignore) (filtered-candidate-transformer . helm-file-name-history-transformer) (action ("Find file" . helm-find-many-files) ("Find file as root" . helm-find-file-as-root) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Open dired in file's directory" . helm-open-dired) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("Pdfgrep File(s)" . helm-ff-pdfgrep) ("Insert as org link" . helm-files-insert-as-org-link) ("Checksum File" . helm-ff-checksum) ("Ediff File" . helm-find-files-ediff-files) ("Ediff Merge File" . helm-find-files-ediff-merge-files) ("Etags `M-., C-u tap, C-u C-u reload tag file'" . helm-ff-etags-select) ("View file" . view-file) ("Insert file" . insert-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally) ("Open file with default tool" . helm-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))))
(setq-default helm-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (cl-loop for i in (symbol-value minibuffer-history-variable) unless (string= "" i) collect i))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (multiline) (action lambda (candidate) (delete-minibuffer-contents) (insert candidate))))
(setq-default minibuffer-history '("/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/" #("\377\331" 0 2 (front-sticky (read-only) read-only t rear-nonsticky (display) display (image :type jpeg :file "/home/rasorasi/projects/dotfiles/.emacs.d/themes/sinku2.jpg"))) #("A_H" 0 3 (c-in-sws t fontified t)) "/home/rasorasi/Desktop/main.c" "/home/rasorasi/Desktop/A.c" "1" #("a" 0 1 (face font-lock-variable-name-face fontified t)) "10" "/home/rasorasi/Desktop/A.h" "/home/rasorasi/Desktop/" "/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/SPI.c" "/media/rasorasi/USBMEMORY/CAN_kato/pic24fj64GA002/SPI.h" #("_rels/" 0 6 (mouse-face highlight help-echo "mouse-2: extract this file into a buffer")) "/media/rasorasi/USBMEMORY/" "Qt4Agg" #("QtCore" 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t)) "/home/rasorasi/p/" "/home/rasorasi/p/machine/test.py" "/home/rasorasi/p/machine/" "/home/rasorasi/p/machine" "98" #("export" 0 6 (face font-lock-builtin-face fontified t)) #("217e74" 0 6 (face font-lock-string-face fontified t)) #("00aef4" 0 6 (face font-lock-string-face fontified t)) #("004ef4" 0 6 (face font-lock-string-face fontified t)) "/home/rasorasi/projects/dotfiles/.emacs.d/themes/" #("\377\330\377\340" 0 4 (front-sticky (read-only) read-only t rear-nonsticky (display) display (image :type jpeg :file "/home/rasorasi/projects/dotfiles/.emacs.d/themes/sinku2.jpg"))) #("1B1D1E" 0 6 (face font-lock-string-face fontified t))))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default query-replace-history '("reki" "patchouli" "hack" "molokai" "<<" "<" ">>" ">" "diff" "hsv_img" "gray1" "src" "deff" "hsv" "" "cv::" "mout_img" "out_img" "min_img" "in_img" "rgb" "gray" "sz_after" "\"camera after\"" "sz_before" "\"camera before\""))
(setq-default search-ring '("session" "cua-mode" "M-i" "keybi" "key" "molo" "reki" "font" "auto-co" "auto-com" "ibus" "migu" "thres" "out_"))
(setq-default serial-name-history '("/dev/ttyS0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default string-rectangle-history '("1"))
